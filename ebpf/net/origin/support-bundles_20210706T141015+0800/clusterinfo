#nodes
items:
- metadata:
    annotations:
      kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock
      node.alpha.kubernetes.io/ttl: "0"
      node.antrea.io/mac-address: 00:0c:29:42:64:98
      volumes.kubernetes.io/controller-managed-attach-detach: "true"
    creationTimestamp: "2021-06-01T09:26:33Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ubuntu-1
      kubernetes.io/os: linux
      node-role.kubernetes.io/control-plane: ""
      node-role.kubernetes.io/master: ""
      node.kubernetes.io/exclude-from-external-load-balancers: ""
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:kubeadm.alpha.kubernetes.io/cri-socket: {}
          f:labels:
            f:node-role.kubernetes.io/control-plane: {}
            f:node-role.kubernetes.io/master: {}
            f:node.kubernetes.io/exclude-from-external-load-balancers: {}
      manager: kubeadm
      operation: Update
      time: "2021-06-01T09:26:36Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:node.antrea.io/mac-address: {}
      manager: antrea-agent
      operation: Update
      time: "2021-06-08T08:53:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:node.alpha.kubernetes.io/ttl: {}
        f:spec:
          f:podCIDR: {}
          f:podCIDRs:
            .: {}
            v:"10.244.0.0/24": {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:24:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:volumes.kubernetes.io/controller-managed-attach-detach: {}
          f:labels:
            .: {}
            f:beta.kubernetes.io/arch: {}
            f:beta.kubernetes.io/os: {}
            f:kubernetes.io/arch: {}
            f:kubernetes.io/hostname: {}
            f:kubernetes.io/os: {}
        f:status:
          f:allocatable:
            f:ephemeral-storage: {}
            f:memory: {}
          f:capacity:
            f:ephemeral-storage: {}
            f:memory: {}
          f:conditions:
            k:{"type":"DiskPressure"}:
              f:lastHeartbeatTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
            k:{"type":"MemoryPressure"}:
              f:lastHeartbeatTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
            k:{"type":"PIDPressure"}:
              f:lastHeartbeatTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
            k:{"type":"Ready"}:
              f:lastHeartbeatTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
          f:images: {}
          f:nodeInfo:
            f:bootID: {}
            f:containerRuntimeVersion: {}
            f:kernelVersion: {}
            f:kubeProxyVersion: {}
            f:kubeletVersion: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:08Z"
    name: ubuntu-1
    resourceVersion: "1245538"
    uid: fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6
  spec:
    podCIDR: 10.244.0.0/24
    podCIDRs:
    - 10.244.0.0/24
  status:
    addresses:
    - address: 192.168.227.2
      type: InternalIP
    - address: ubuntu-1
      type: Hostname
    allocatable:
      cpu: "2"
      ephemeral-storage: "44106319799"
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 3898752Ki
      pods: "110"
    capacity:
      cpu: "2"
      ephemeral-storage: 47858420Ki
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 4001152Ki
      pods: "110"
    conditions:
    - lastHeartbeatTime: "2021-07-06T06:07:39Z"
      lastTransitionTime: "2021-07-05T09:25:08Z"
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: "2021-07-06T06:07:39Z"
      lastTransitionTime: "2021-07-05T09:25:08Z"
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: "2021-07-06T06:07:39Z"
      lastTransitionTime: "2021-07-05T09:25:08Z"
      message: kubelet has sufficient PID available
      reason: KubeletHasSufficientPID
      status: "False"
      type: PIDPressure
    - lastHeartbeatTime: "2021-07-06T06:07:39Z"
      lastTransitionTime: "2021-07-05T09:25:08Z"
      message: kubelet is posting ready status. AppArmor enabled
      reason: KubeletReady
      status: "True"
      type: Ready
    daemonEndpoints:
      kubeletEndpoint:
        Port: 10250
    images:
    - names:
      - sysdig/sysdig@sha256:cacbfb68c99784b119e6bd2b6b89dbfb213848fa76e3a0c9f65c7881df63c8c2
      - sysdig/sysdig:latest
      sizeBytes: 741530976
    - names:
      - antrea/antrea-ubuntu@sha256:80a5f7251c0650bf011631a5b43b0063ee8ab5558ad80d0245144ebe7a46be54
      - antrea/antrea-ubuntu:latest
      - projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      sizeBytes: 397189347
    - names:
      - wanan/etcd@sha256:bd4d2c9a19be8a492bc79df53eee199fd04b415e9993eb69f7718052602a147a
      - wanan/etcd:3.4.13-0
      - k8s.gcr.io/etcd:3.4.13-0
      sizeBytes: 253392289
    - names:
      - nginx@sha256:47ae43cdfc7064d28800bc42e79a429540c7c80168e8c8952778c0d5af1c09db
      - nginx:latest
      sizeBytes: 133121833
    - names:
      - aiotceo/kube-proxy@sha256:3aeeb5b760b096b0a8ae71fa4bc28dfbfe77b11a06bf40360b5caf17d5b4c5b8
      - aiotceo/kube-proxy:v1.21.1
      - k8s.gcr.io/kube-proxy:v1.21.1
      sizeBytes: 130788187
    - names:
      - aiotceo/kube-apiserver@sha256:c81aabdc567a1858c62fb939e4d54abe3854087c9c683ac9bf1a60137b272258
      - aiotceo/kube-apiserver:v1.21.1
      - k8s.gcr.io/kube-apiserver:v1.21.1
      sizeBytes: 125612423
    - names:
      - aiotceo/kube-controller-manager@sha256:e0d7e62864b91b05f02e51ce0ecf8c986270eedb2d1512edff0d43b8660a442e
      - aiotceo/kube-controller-manager:v1.21.1
      - k8s.gcr.io/kube-controller-manager:v1.21.1
      sizeBytes: 119825302
    - names:
      - hangyan/local-volume-provisioner@sha256:27444b7b3c8dd5c9015674607db316fb5b8e45348fa1ccabe2c656a70f93ecf0
      - hangyan/local-volume-provisioner:v2.4.0
      sizeBytes: 103303447
    - names:
      - ubuntu@sha256:adf73ca014822ad8237623d388cedf4d5346aa72c270c5acc01431cc93e18e2d
      sizeBytes: 72704716
    - names:
      - aiotceo/kube-scheduler@sha256:b959d178004ea7aa2b2f118710f55b0b4ad2b9e7710bb8427c7351ef67b943cb
      - aiotceo/kube-scheduler:v1.21.1
      - k8s.gcr.io/kube-scheduler:v1.21.1
      sizeBytes: 50635642
    - names:
      - coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e
      - coredns/coredns:1.8.0
      - k8s.gcr.io/coredns/coredns:v1.8.0
      - k8s.grc.io/coredns/coredns:v1.8.0
      sizeBytes: 42454755
    - names:
      - aiotceo/pause@sha256:9ec1e780f5c0196af7b28f135ffc0533eddcb0a54a0ba8b32943303ce76fe70d
      - aiotceo/pause:3.4.1
      - k8s.gcr.io/pause:3.4.1
      sizeBytes: 682696
    nodeInfo:
      architecture: amd64
      bootID: 746003f7-f3ac-4b6d-947c-4cec1426c90f
      containerRuntimeVersion: docker://20.10.7
      kernelVersion: 5.4.0-77-generic
      kubeProxyVersion: v1.21.2
      kubeletVersion: v1.21.2
      machineID: 24d871ba5be34e79a9ed5fa130710f4b
      operatingSystem: linux
      osImage: Ubuntu 20.04.2 LTS
      systemUUID: a3c74d56-8e62-80bd-c358-5bf741426498
- metadata:
    annotations:
      kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock
      node.alpha.kubernetes.io/ttl: "0"
      node.antrea.io/mac-address: 00:0c:29:44:fc:5f
      volumes.kubernetes.io/controller-managed-attach-detach: "true"
    creationTimestamp: "2021-06-02T08:41:09Z"
    labels:
      beta.kubernetes.io/arch: amd64
      beta.kubernetes.io/os: linux
      kubernetes.io/arch: amd64
      kubernetes.io/hostname: ubuntu-2
      kubernetes.io/os: linux
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:kubeadm.alpha.kubernetes.io/cri-socket: {}
      manager: kubeadm
      operation: Update
      time: "2021-06-02T08:41:11Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:node.antrea.io/mac-address: {}
      manager: antrea-agent
      operation: Update
      time: "2021-06-08T08:53:38Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:volumes.kubernetes.io/controller-managed-attach-detach: {}
          f:labels:
            .: {}
            f:beta.kubernetes.io/arch: {}
            f:beta.kubernetes.io/os: {}
            f:kubernetes.io/arch: {}
            f:kubernetes.io/hostname: {}
            f:kubernetes.io/os: {}
        f:status:
          f:allocatable:
            f:ephemeral-storage: {}
            f:memory: {}
          f:capacity:
            f:ephemeral-storage: {}
            f:memory: {}
          f:conditions:
            k:{"type":"DiskPressure"}:
              f:lastHeartbeatTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
            k:{"type":"MemoryPressure"}:
              f:lastHeartbeatTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
            k:{"type":"PIDPressure"}:
              f:lastHeartbeatTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
            k:{"type":"Ready"}:
              f:lastHeartbeatTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
          f:images: {}
          f:nodeInfo:
            f:bootID: {}
            f:kernelVersion: {}
      manager: kubelet
      operation: Update
      time: "2021-07-01T07:41:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:node.alpha.kubernetes.io/ttl: {}
        f:spec:
          f:podCIDR: {}
          f:podCIDRs:
            .: {}
            v:"10.244.1.0/24": {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T08:23:29Z"
    name: ubuntu-2
    resourceVersion: "1245409"
    uid: 989a8f60-fdff-4a63-a9ca-cea0c5abd7cd
  spec:
    podCIDR: 10.244.1.0/24
    podCIDRs:
    - 10.244.1.0/24
  status:
    addresses:
    - address: 192.168.227.3
      type: InternalIP
    - address: ubuntu-2
      type: Hostname
    allocatable:
      cpu: "2"
      ephemeral-storage: "17948241072"
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 3899308Ki
      pods: "110"
    capacity:
      cpu: "2"
      ephemeral-storage: 19475088Ki
      hugepages-1Gi: "0"
      hugepages-2Mi: "0"
      memory: 4001708Ki
      pods: "110"
    conditions:
    - lastHeartbeatTime: "2021-07-06T06:06:05Z"
      lastTransitionTime: "2021-07-01T07:41:58Z"
      message: kubelet has sufficient memory available
      reason: KubeletHasSufficientMemory
      status: "False"
      type: MemoryPressure
    - lastHeartbeatTime: "2021-07-06T06:06:05Z"
      lastTransitionTime: "2021-07-01T07:41:58Z"
      message: kubelet has no disk pressure
      reason: KubeletHasNoDiskPressure
      status: "False"
      type: DiskPressure
    - lastHeartbeatTime: "2021-07-06T06:06:05Z"
      lastTransitionTime: "2021-07-01T07:41:58Z"
      message: kubelet has sufficient PID available
      reason: KubeletHasSufficientPID
      status: "False"
      type: PIDPressure
    - lastHeartbeatTime: "2021-07-06T06:06:05Z"
      lastTransitionTime: "2021-07-01T07:41:58Z"
      message: kubelet is posting ready status. AppArmor enabled
      reason: KubeletReady
      status: "True"
      type: Ready
    daemonEndpoints:
      kubeletEndpoint:
        Port: 10250
    images:
    - names:
      - projects.registry.vmware.com/antrea/antrea-ubuntu@sha256:5b8169f4df1afa2fb665a8e9aa81a16ffd567e0c6e7df7fc4a40ef86dea1e439
      - projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      sizeBytes: 397189347
    - names:
      - tsidentity/ti-vault@sha256:a75bc85ddd1280f9d0f7fc73cf279cfcbab87e1039a16cbadc40037bcf4e91c1
      - tsidentity/ti-vault:v1.8.4
      sizeBytes: 220412338
    - names:
      - projects.registry.vmware.com/antrea/octant-antrea-ubuntu@sha256:193c434bf0dac51f065c62bdda54c8c73dc1c816ce2c17bcc3a8f8b618fc9ff9
      - projects.registry.vmware.com/antrea/octant-antrea-ubuntu:latest
      sizeBytes: 218966793
    - names:
      - nginx@sha256:47ae43cdfc7064d28800bc42e79a429540c7c80168e8c8952778c0d5af1c09db
      - nginx:latest
      sizeBytes: 133121833
    - names:
      - aiotceo/kube-proxy@sha256:3aeeb5b760b096b0a8ae71fa4bc28dfbfe77b11a06bf40360b5caf17d5b4c5b8
      - aiotceo/kube-proxy:v1.21.1
      - k8s.gcr.io/kube-proxy:v1.21.1
      sizeBytes: 130788187
    - names:
      - hangyan/local-volume-provisioner@sha256:27444b7b3c8dd5c9015674607db316fb5b8e45348fa1ccabe2c656a70f93ecf0
      - hangyan/local-volume-provisioner:v2.4.0
      sizeBytes: 103303447
    - names:
      - jessestuart/tiller@sha256:a3f310e1b6edbdaf5d0e1febe5e7779a43a269b9b9715724ae36626f4661ff56
      - jessestuart/tiller:v2.16.7
      sizeBytes: 87464707
    - names:
      - hangyan/coredns@sha256:10ecc12177735e5a6fd6fa0127202776128d860ed7ab0341780ddaeb1f6dfe61
      - hangyan/coredns:v1.8.0
      sizeBytes: 42454755
    - names:
      - hangyan/spiffe-wait-for-it@sha256:d9bdc931e4404237d2fb0ba84db5ece88b236c40eeca570d786ee54fd243f4ae
      - hangyan/spiffe-wait-for-it:latest
      sizeBytes: 15143000
    - names:
      - aiotceo/pause@sha256:9ec1e780f5c0196af7b28f135ffc0533eddcb0a54a0ba8b32943303ce76fe70d
      - aiotceo/pause:3.4.1
      - k8s.gcr.io/pause:3.4.1
      sizeBytes: 682696
    nodeInfo:
      architecture: amd64
      bootID: bdf831e6-11e5-4c2c-a3ae-21b8297dad17
      containerRuntimeVersion: docker://20.10.6
      kernelVersion: 5.4.0-74-generic
      kubeProxyVersion: v1.21.1
      kubeletVersion: v1.21.1
      machineID: be5f7dac4ebf4b228cd914d7a077cdef
      operatingSystem: linux
      osImage: Ubuntu 20.04.2 LTS
      systemUUID: 8ed04d56-b2fd-3aea-2e14-327f4e44fc5f
metadata:
  resourceVersion: "1245538"
---
#configs
items:
- data:
    antrea-agent.conf: |
      # FeatureGates is a map of feature names to bools that enable or disable experimental features.
      featureGates:
      # Enable AntreaProxy which provides ServiceLB for in-cluster Services in antrea-agent.
      # It should be enabled on Windows, otherwise NetworkPolicy will not take effect on
      # Service traffic.
      #  AntreaProxy: true

      # Enable EndpointSlice support in AntreaProxy. Don't enable this feature unless that EndpointSlice
      # API version v1beta1 is supported and set as enabled in Kubernetes. If AntreaProxy is not enabled,
      # this flag will not take effect.
      #  EndpointSlice: false

      # Enable traceflow which provides packet tracing feature to diagnose network issue.
      #  Traceflow: true

      # Enable NodePortLocal feature to make the pods reachable externally through NodePort
      #  NodePortLocal: false

      # Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
      # to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
      # feature that supports priorities, rule actions and externalEntities in the future.
      #  AntreaPolicy: true

      # Enable flowexporter which exports polled conntrack connections as IPFIX flow records from each
      # agent to a configured collector.
      #  FlowExporter: false

      # Enable collecting and exposing NetworkPolicy statistics.
      #  NetworkPolicyStats: false

      # Enable controlling SNAT IPs of Pod egress traffic.
         Egress: true

      # Name of the OpenVSwitch bridge antrea-agent will create and use.
      # Make sure it doesn't conflict with your existing OpenVSwitch bridges.
      #ovsBridge: br-int

      # Datapath type to use for the OpenVSwitch bridge created by Antrea. Supported values are:
      # - system
      # - netdev
      # 'system' is the default value and corresponds to the kernel datapath. Use 'netdev' to run
      # OVS in userspace mode. Userspace mode requires the tun device driver to be available.
      #ovsDatapathType: system

      # Name of the interface antrea-agent will create and use for host <--> pod communication.
      # Make sure it doesn't conflict with your existing interfaces.
      #hostGateway: antrea-gw0

      # Determines how traffic is encapsulated. It has the following options:
      # encap(default):    Inter-node Pod traffic is always encapsulated and Pod to external network
      #                    traffic is SNAT'd.
      # noEncap:           Inter-node Pod traffic is not encapsulated; Pod to external network traffic is
      #                    SNAT'd if noSNAT is not set to true. Underlying network must be capable of
      #                    supporting Pod traffic across IP subnets.
      # hybrid:            noEncap if source and destination Nodes are on the same subnet, otherwise encap.
      # networkPolicyOnly: Antrea enforces NetworkPolicy only, and utilizes CNI chaining and delegates Pod
      #                    IPAM and connectivity to the primary CNI.
      #
      trafficEncapMode: noEncap

      # Whether or not to SNAT (using the Node IP) the egress traffic from a Pod to the external network.
      # This option is for the noEncap traffic mode only, and the default value is false. In the noEncap
      # mode, if the cluster's Pod CIDR is reachable from the external network, then the Pod traffic to
      # the external network needs not be SNAT'd. In the networkPolicyOnly mode, antrea-agent never
      # performs SNAT and this option will be ignored; for other modes it must be set to false.
      #noSNAT: false

      # Tunnel protocols used for encapsulating traffic across Nodes. Supported values:
      # - geneve (default)
      # - vxlan
      # - gre
      # - stt
      #tunnelType: geneve

      # Default MTU to use for the host gateway interface and the network interface of each Pod.
      # If omitted, antrea-agent will discover the MTU of the Node's primary interface and
      # also adjust MTU to accommodate for tunnel encapsulation overhead (if applicable).
      #defaultMTU: 0

      # Whether or not to enable IPsec encryption of tunnel traffic. IPsec encryption is only supported
      # for the GRE tunnel type.
      #enableIPSecTunnel: false

      # ClusterIP CIDR range for Services. It's required when AntreaProxy is not enabled, and should be
      # set to the same value as the one specified by --service-cluster-ip-range for kube-apiserver. When
      # AntreaProxy is enabled, this parameter is not needed and will be ignored if provided.
      #serviceCIDR: 10.96.0.0/12

      # ClusterIP CIDR range for IPv6 Services. It's required when using kube-proxy to provide IPv6 Service in a Dual-Stack
      # cluster or an IPv6 only cluster. The value should be the same as the configuration for kube-apiserver specified by
      # --service-cluster-ip-range. When AntreaProxy is enabled, this parameter is not needed.
      # No default value for this field.
      #serviceCIDRv6:

      # The port for the antrea-agent APIServer to serve on.
      # Note that if it's set to another value, the `containerPort` of the `api` port of the
      # `antrea-agent` container must be set to the same value.
      #apiPort: 10350

      # Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
      #enablePrometheusMetrics: true

      # Provide the IPFIX collector address as a string with format <HOST>:[<PORT>][:<PROTO>].
      # HOST can either be the DNS name or the IP of the Flow Collector. For example,
      # "flow-aggregator.flow-aggregator.svc" can be provided as DNS name to connect
      # to the Antrea Flow Aggregator service. If IP, it can be either IPv4 or IPv6.
      # However, IPv6 address should be wrapped with [].
      # If PORT is empty, we default to 4739, the standard IPFIX port.
      # If no PROTO is given, we consider "tls" as default. We support "tls", "tcp" and
      # "udp" protocols. "tls" is used for securing communication between flow exporter and
      # flow aggregator.
      #flowCollectorAddr: "flow-aggregator.flow-aggregator.svc:4739:tls"

      # Provide flow poll interval as a duration string. This determines how often the
      # flow exporter dumps connections from the conntrack module. Flow poll interval
      # should be greater than or equal to 1s (one second).
      # Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
      #flowPollInterval: "5s"

      # Provide the active flow export timeout, which is the timeout after which a flow
      # record is sent to the collector for active flows. Thus, for flows with a continuous
      # stream of packets, a flow record will be exported to the collector once the elapsed
      # time since the last export event is equal to the value of this timeout.
      # Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
      #activeFlowExportTimeout: "30s"

      # Provide the idle flow export timeout, which is the timeout after which a flow
      # record is sent to the collector for idle flows. A flow is considered idle if no
      # packet matching this flow has been observed since the last export event.
      # Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
      #idleFlowExportTimeout: "15s"

      # Provide the port range used by NodePortLocal. When the NodePortLocal feature is enabled, a port from that range will be assigned
      # whenever a Pod's container defines a specific port to be exposed (each container can define a list of ports as pod.spec.containers[].ports),
      # and all Node traffic directed to that port will be forwarded to the Pod.
      #nplPortRange: 40000-41000

      # Provide the address of Kubernetes apiserver, to override any value provided in kubeconfig or InClusterConfig.
      # Defaults to "". It must be a host string, a host:port pair, or a URL to the base of the apiserver.
      #kubeAPIServerOverride: ""

      # Comma-separated list of Cipher Suites. If omitted, the default Go Cipher Suites will be used.
      # https://golang.org/pkg/crypto/tls/#pkg-constants
      # Note that TLS1.3 Cipher Suites cannot be added to the list. But the apiserver will always
      # prefer TLS1.3 Cipher Suites whenever possible.
      #tlsCipherSuites:

      # TLS min version from: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
      #tlsMinVersion:
    antrea-cni.conflist: |
      {
          "cniVersion":"0.3.0",
          "name": "antrea",
          "plugins": [
              {
                  "type": "antrea",
                  "ipam": {
                      "type": "host-local"
                  }
              },
              {
                  "type": "portmap",
                  "capabilities": {"portMappings": true}
              },
              {
                  "type": "bandwidth",
                  "capabilities": {"bandwidth": true}
              }
          ]
      }
    antrea-controller.conf: |
      # FeatureGates is a map of feature names to bools that enable or disable experimental features.
      featureGates:
      # Enable traceflow which provides packet tracing feature to diagnose network issue.
      #  Traceflow: true

      # Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins
      # to define security policies which apply to the entire cluster, and Antrea NetworkPolicy
      # feature that supports priorities, rule actions and externalEntities in the future.
      #  AntreaPolicy: true

      # Enable collecting and exposing NetworkPolicy statistics.
      #  NetworkPolicyStats: false

      # Enable controlling SNAT IPs of Pod egress traffic.
         Egress: true

      # The port for the antrea-controller APIServer to serve on.
      # Note that if it's set to another value, the `containerPort` of the `api` port of the
      # `antrea-controller` container must be set to the same value.
      #apiPort: 10349

      # Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.
      #enablePrometheusMetrics: true

      # Indicates whether to use auto-generated self-signed TLS certificate.
      # If false, A Secret named "antrea-controller-tls" must be provided with the following keys:
      #   ca.crt: <CA certificate>
      #   tls.crt: <TLS certificate>
      #   tls.key: <TLS private key>
      # And the Secret must be mounted to directory "/var/run/antrea/antrea-controller-tls" of the
      # antrea-controller container.
      #selfSignedCert: true

      # Comma-separated list of Cipher Suites. If omitted, the default Go Cipher Suites will be used.
      # https://golang.org/pkg/crypto/tls/#pkg-constants
      # Note that TLS1.3 Cipher Suites cannot be added to the list. But the apiserver will always
      # prefer TLS1.3 Cipher Suites whenever possible.
      #tlsCipherSuites:

      # TLS min version from: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
      #tlsMinVersion:

      # If Antrea is upgraded from version <= v0.13 and legacy CRDs are used, this option should be
      # enabled, otherwise the CRDs created with the legacy API groups will not take any effect and
      # work as expected. When the mirroring is enabled, if a legacy CRD is created with legacy API
      # groups, mirroring-controller will create a new CRD with the Spec and Labels from the legacy
      # CRD. Afterwards, the modification of Spec and Label in legacy CRD will be synchronized to new
      # CRD automatically. In addition, the modification of Status in new CRD will also be synchronized
      # to legacy CRD automatically. If a legacy CRD is deleted, the corresponding new CRD will be deleted.
      # Note that: to decouple a new CRD from the corresponding legacy CRD, the legacy CRD should be
      # annotated with "crd.antrea.io/stop-mirror". Afterwards, updates to the legacy CRDs will no
      # longer be reflected in the new CRD, and all CRUD operations should be done through the new
      # API groups. After adding the annotation, legacy CRDs can be deleted safely without impacting
      # new CRDs.
      #legacyCRDMirroring: true
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"antrea-agent.conf":"# FeatureGates is a map of feature names to bools that enable or disable experimental features.\nfeatureGates:\n# Enable AntreaProxy which provides ServiceLB for in-cluster Services in antrea-agent.\n# It should be enabled on Windows, otherwise NetworkPolicy will not take effect on\n# Service traffic.\n#  AntreaProxy: true\n\n# Enable EndpointSlice support in AntreaProxy. Don't enable this feature unless that EndpointSlice\n# API version v1beta1 is supported and set as enabled in Kubernetes. If AntreaProxy is not enabled,\n# this flag will not take effect.\n#  EndpointSlice: false\n\n# Enable traceflow which provides packet tracing feature to diagnose network issue.\n#  Traceflow: true\n\n# Enable NodePortLocal feature to make the pods reachable externally through NodePort\n#  NodePortLocal: false\n\n# Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins\n# to define security policies which apply to the entire cluster, and Antrea NetworkPolicy\n# feature that supports priorities, rule actions and externalEntities in the future.\n#  AntreaPolicy: true\n\n# Enable flowexporter which exports polled conntrack connections as IPFIX flow records from each\n# agent to a configured collector.\n#  FlowExporter: false\n\n# Enable collecting and exposing NetworkPolicy statistics.\n#  NetworkPolicyStats: false\n\n# Enable controlling SNAT IPs of Pod egress traffic.\n   Egress: true\n\n# Name of the OpenVSwitch bridge antrea-agent will create and use.\n# Make sure it doesn't conflict with your existing OpenVSwitch bridges.\n#ovsBridge: br-int\n\n# Datapath type to use for the OpenVSwitch bridge created by Antrea. Supported values are:\n# - system\n# - netdev\n# 'system' is the default value and corresponds to the kernel datapath. Use 'netdev' to run\n# OVS in userspace mode. Userspace mode requires the tun device driver to be available.\n#ovsDatapathType: system\n\n# Name of the interface antrea-agent will create and use for host \u003c--\u003e pod communication.\n# Make sure it doesn't conflict with your existing interfaces.\n#hostGateway: antrea-gw0\n\n# Determines how traffic is encapsulated. It has the following options:\n# encap(default):    Inter-node Pod traffic is always encapsulated and Pod to external network\n#                    traffic is SNAT'd.\n# noEncap:           Inter-node Pod traffic is not encapsulated; Pod to external network traffic is\n#                    SNAT'd if noSNAT is not set to true. Underlying network must be capable of\n#                    supporting Pod traffic across IP subnets.\n# hybrid:            noEncap if source and destination Nodes are on the same subnet, otherwise encap.\n# networkPolicyOnly: Antrea enforces NetworkPolicy only, and utilizes CNI chaining and delegates Pod\n#                    IPAM and connectivity to the primary CNI.\n#\n  trafficEncapMode: noEncap\n\n# Whether or not to SNAT (using the Node IP) the egress traffic from a Pod to the external network.\n# This option is for the noEncap traffic mode only, and the default value is false. In the noEncap\n# mode, if the cluster's Pod CIDR is reachable from the external network, then the Pod traffic to\n# the external network needs not be SNAT'd. In the networkPolicyOnly mode, antrea-agent never\n# performs SNAT and this option will be ignored; for other modes it must be set to false.\n#noSNAT: false\n\n# Tunnel protocols used for encapsulating traffic across Nodes. Supported values:\n# - geneve (default)\n# - vxlan\n# - gre\n# - stt\n#tunnelType: geneve\n\n# Default MTU to use for the host gateway interface and the network interface of each Pod.\n# If omitted, antrea-agent will discover the MTU of the Node's primary interface and\n# also adjust MTU to accommodate for tunnel encapsulation overhead (if applicable).\n#defaultMTU: 0\n\n# Whether or not to enable IPsec encryption of tunnel traffic. IPsec encryption is only supported\n# for the GRE tunnel type.\n#enableIPSecTunnel: false\n\n# ClusterIP CIDR range for Services. It's required when AntreaProxy is not enabled, and should be\n# set to the same value as the one specified by --service-cluster-ip-range for kube-apiserver. When\n# AntreaProxy is enabled, this parameter is not needed and will be ignored if provided.\n#serviceCIDR: 10.96.0.0/12\n\n# ClusterIP CIDR range for IPv6 Services. It's required when using kube-proxy to provide IPv6 Service in a Dual-Stack\n# cluster or an IPv6 only cluster. The value should be the same as the configuration for kube-apiserver specified by\n# --service-cluster-ip-range. When AntreaProxy is enabled, this parameter is not needed.\n# No default value for this field.\n#serviceCIDRv6:\n\n# The port for the antrea-agent APIServer to serve on.\n# Note that if it's set to another value, the `containerPort` of the `api` port of the\n# `antrea-agent` container must be set to the same value.\n#apiPort: 10350\n\n# Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.\n#enablePrometheusMetrics: true\n\n# Provide the IPFIX collector address as a string with format \u003cHOST\u003e:[\u003cPORT\u003e][:\u003cPROTO\u003e].\n# HOST can either be the DNS name or the IP of the Flow Collector. For example,\n# \"flow-aggregator.flow-aggregator.svc\" can be provided as DNS name to connect\n# to the Antrea Flow Aggregator service. If IP, it can be either IPv4 or IPv6.\n# However, IPv6 address should be wrapped with [].\n# If PORT is empty, we default to 4739, the standard IPFIX port.\n# If no PROTO is given, we consider \"tls\" as default. We support \"tls\", \"tcp\" and\n# \"udp\" protocols. \"tls\" is used for securing communication between flow exporter and\n# flow aggregator.\n#flowCollectorAddr: \"flow-aggregator.flow-aggregator.svc:4739:tls\"\n\n# Provide flow poll interval as a duration string. This determines how often the\n# flow exporter dumps connections from the conntrack module. Flow poll interval\n# should be greater than or equal to 1s (one second).\n# Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n#flowPollInterval: \"5s\"\n\n# Provide the active flow export timeout, which is the timeout after which a flow\n# record is sent to the collector for active flows. Thus, for flows with a continuous\n# stream of packets, a flow record will be exported to the collector once the elapsed\n# time since the last export event is equal to the value of this timeout.\n# Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n#activeFlowExportTimeout: \"30s\"\n\n# Provide the idle flow export timeout, which is the timeout after which a flow\n# record is sent to the collector for idle flows. A flow is considered idle if no\n# packet matching this flow has been observed since the last export event.\n# Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n#idleFlowExportTimeout: \"15s\"\n\n# Provide the port range used by NodePortLocal. When the NodePortLocal feature is enabled, a port from that range will be assigned\n# whenever a Pod's container defines a specific port to be exposed (each container can define a list of ports as pod.spec.containers[].ports),\n# and all Node traffic directed to that port will be forwarded to the Pod.\n#nplPortRange: 40000-41000\n\n# Provide the address of Kubernetes apiserver, to override any value provided in kubeconfig or InClusterConfig.\n# Defaults to \"\". It must be a host string, a host:port pair, or a URL to the base of the apiserver.\n#kubeAPIServerOverride: \"\"\n\n# Comma-separated list of Cipher Suites. If omitted, the default Go Cipher Suites will be used.\n# https://golang.org/pkg/crypto/tls/#pkg-constants\n# Note that TLS1.3 Cipher Suites cannot be added to the list. But the apiserver will always\n# prefer TLS1.3 Cipher Suites whenever possible.\n#tlsCipherSuites:\n\n# TLS min version from: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\n#tlsMinVersion:\n","antrea-cni.conflist":"{\n    \"cniVersion\":\"0.3.0\",\n    \"name\": \"antrea\",\n    \"plugins\": [\n        {\n            \"type\": \"antrea\",\n            \"ipam\": {\n                \"type\": \"host-local\"\n            }\n        },\n        {\n            \"type\": \"portmap\",\n            \"capabilities\": {\"portMappings\": true}\n        },\n        {\n            \"type\": \"bandwidth\",\n            \"capabilities\": {\"bandwidth\": true}\n        }\n    ]\n}\n","antrea-controller.conf":"# FeatureGates is a map of feature names to bools that enable or disable experimental features.\nfeatureGates:\n# Enable traceflow which provides packet tracing feature to diagnose network issue.\n#  Traceflow: true\n\n# Enable Antrea ClusterNetworkPolicy feature to complement K8s NetworkPolicy for cluster admins\n# to define security policies which apply to the entire cluster, and Antrea NetworkPolicy\n# feature that supports priorities, rule actions and externalEntities in the future.\n#  AntreaPolicy: true\n\n# Enable collecting and exposing NetworkPolicy statistics.\n#  NetworkPolicyStats: false\n\n# Enable controlling SNAT IPs of Pod egress traffic.\n   Egress: true\n\n# The port for the antrea-controller APIServer to serve on.\n# Note that if it's set to another value, the `containerPort` of the `api` port of the\n# `antrea-controller` container must be set to the same value.\n#apiPort: 10349\n\n# Enable metrics exposure via Prometheus. Initializes Prometheus metrics listener.\n#enablePrometheusMetrics: true\n\n# Indicates whether to use auto-generated self-signed TLS certificate.\n# If false, A Secret named \"antrea-controller-tls\" must be provided with the following keys:\n#   ca.crt: \u003cCA certificate\u003e\n#   tls.crt: \u003cTLS certificate\u003e\n#   tls.key: \u003cTLS private key\u003e\n# And the Secret must be mounted to directory \"/var/run/antrea/antrea-controller-tls\" of the\n# antrea-controller container.\n#selfSignedCert: true\n\n# Comma-separated list of Cipher Suites. If omitted, the default Go Cipher Suites will be used.\n# https://golang.org/pkg/crypto/tls/#pkg-constants\n# Note that TLS1.3 Cipher Suites cannot be added to the list. But the apiserver will always\n# prefer TLS1.3 Cipher Suites whenever possible.\n#tlsCipherSuites:\n\n# TLS min version from: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.\n#tlsMinVersion:\n\n# If Antrea is upgraded from version \u003c= v0.13 and legacy CRDs are used, this option should be\n# enabled, otherwise the CRDs created with the legacy API groups will not take any effect and\n# work as expected. When the mirroring is enabled, if a legacy CRD is created with legacy API\n# groups, mirroring-controller will create a new CRD with the Spec and Labels from the legacy\n# CRD. Afterwards, the modification of Spec and Label in legacy CRD will be synchronized to new\n# CRD automatically. In addition, the modification of Status in new CRD will also be synchronized\n# to legacy CRD automatically. If a legacy CRD is deleted, the corresponding new CRD will be deleted.\n# Note that: to decouple a new CRD from the corresponding legacy CRD, the legacy CRD should be\n# annotated with \"crd.antrea.io/stop-mirror\". Afterwards, updates to the legacy CRDs will no\n# longer be reflected in the new CRD, and all CRUD operations should be done through the new\n# API groups. After adding the annotation, legacy CRDs can be deleted safely without impacting\n# new CRDs.\n#legacyCRDMirroring: true\n"},"kind":"ConfigMap","metadata":{"annotations":{},"creationTimestamp":"2021-06-01T09:27:23Z","labels":{"app":"antrea"},"managedFields":[{"apiVersion":"v1","fieldsType":"FieldsV1","fieldsV1":{"f:data":{".":{},"f:antrea-cni.conflist":{}},"f:metadata":{"f:annotations":{".":{},"f:kubectl.kubernetes.io/last-applied-configuration":{}},"f:labels":{".":{},"f:app":{}}}},"manager":"kubectl-client-side-apply","operation":"Update","time":"2021-06-11T01:01:44Z"},{"apiVersion":"v1","fieldsType":"FieldsV1","fieldsV1":{"f:data":{"f:antrea-agent.conf":{},"f:antrea-controller.conf":{}}},"manager":"kubectl-edit","operation":"Update","time":"2021-07-05T08:19:27Z"}],"name":"antrea-config-cbfh568k9m","namespace":"kube-system","selfLink":"/api/v1/namespaces/kube-system/configmaps/antrea-config-cbfh568k9m","uid":"50a020b7-b443-4b63-b7d6-98aa18364d61"}}
    creationTimestamp: "2021-06-01T09:27:23Z"
    labels:
      app: antrea
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:antrea-cni.conflist: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-07-05T08:49:26Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          f:antrea-agent.conf: {}
          f:antrea-controller.conf: {}
      manager: kubectl-edit
      operation: Update
      time: "2021-07-05T08:50:54Z"
    name: antrea-config-cbfh568k9m
    namespace: kube-system
    resourceVersion: "1204851"
    uid: 50a020b7-b443-4b63-b7d6-98aa18364d61
- data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDXDCCAkSgAwIBAgIBAjANBgkqhkiG9w0BAQsFADAfMR0wGwYDVQQDDBRhbnRy
      ZWEtY2FAMTYyNTQ3MzE3ODAeFw0yMTA3MDUwNzE5MzhaFw0yMjA3MDUwNzE5Mzha
      MBwxGjAYBgNVBAMMEWFudHJlYUAxNjI1NDczMTc5MIIBIjANBgkqhkiG9w0BAQEF
      AAOCAQ8AMIIBCgKCAQEAvQKgBRKM18ZlSAfnYg1iFvU9lCjYHhfKmAbyDTKWlo/t
      LpE1ent05DR9mHF41q7yJf5RfhpEil1XTMfitPJkemvP8LM0+Xm7YfVTaJFzOm3r
      +puAg5xARaya5dlBWjc7/zYeRJwxxcgIxjWwGkIgorjhoqGePs9YGo320WhmZnuP
      UY+3QTYIpPNr57ifjVZE/Z30lEPrkNZpbUhWs0mBe4jmtHaKf3mi8y+/YluYbRex
      Dfiuuycbw+NcGZXhHupAXxdFRHliqyLupnWVoW1CtZrgmSM+2ED+uKNznvUlWCH2
      gmCqVSXQsuTPTj16ZRdwMypwQnh2CgUFZEBVwNEb6wIDAQABo4GlMIGiMA4GA1Ud
      DwEB/wQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcDATAMBgNVHRMBAf8EAjAAMB8G
      A1UdIwQYMBaAFOlf/Ucqdn5TL0X3l6NEQVIC6d/nMEwGA1UdEQRFMEOCBmFudHJl
      YYIWYW50cmVhLmt1YmUtc3lzdGVtLnN2Y4IJbG9jYWxob3N0hwR/AAABhxAAAAAA
      AAAAAAAAAAAAAAABMA0GCSqGSIb3DQEBCwUAA4IBAQBYrJzg1vOYfjTV8Jd0eege
      rN6wG4+PYN9wdWcM+cajR9Rj4JvHYLFyuh1AA1QXMYJFlaWm7qvO6sUfAj5kcP3j
      bXey+S0cfi04wHRxxcbOy5auIIbHeSseiFDx1aiqfZuaJHOOxjVS1bOS+lOgsJix
      j3DNKzOvMEZx6XoOW8KSNwKeqlCK4vrhAPj/LoaNS/cDL1KQbgglJhJUeIaoLDq8
      9my+nD6W/esAfctJ8yJDHEUz4v8JTLijSWqQlWFwxFPPVc6o2GRQTIbM46hQLLbw
      evdnOCNi5nqForM91TCstXEOk+JLOoTtsJouRsQP9yK7cVLAHAkkPq2ZsNc7P13x
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIC+zCCAeOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAfMR0wGwYDVQQDDBRhbnRy
      ZWEtY2FAMTYyNTQ3MzE3ODAeFw0yMTA3MDUwNzE5MzhaFw0yMjA3MDUwNzE5Mzha
      MB8xHTAbBgNVBAMMFGFudHJlYS1jYUAxNjI1NDczMTc4MIIBIjANBgkqhkiG9w0B
      AQEFAAOCAQ8AMIIBCgKCAQEAwY958FXlQ+WLlMH8SoylM9MjZj/xGoobAZj0lI3l
      pejME77fxQO0+7XsRnRuLbcRY5LhK7Y/vFZB5wYkyujYm7S3NsvNzmI1ZuZFd3zl
      21WDKL2GzLX2QlDc2rERq7obW+nNJNxzIkOkDJfEfVrpWxqLMA3xS1YKqRNgRaFt
      LUcnXuBZREZQgyhp0SAt5H3TaGvDZcsq/h6mNEuywaM81I6GDk7CH+f7AkoJ8Pd4
      i7HfLCs3PYNOp23ddgAGFYG7NDS96YG27/3tE3SlMDjSV2Nh6pVmDLoRo2bg1cOX
      UkgKe8ZZKjv2TN+swZxCQnaOqj46jq/Sq8RKQUfc59wpKQIDAQABo0IwQDAOBgNV
      HQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU6V/9Ryp2flMv
      RfeXo0RBUgLp3+cwDQYJKoZIhvcNAQELBQADggEBAIpV0K3J2xvh9dmpJ/Lj0KLZ
      OwjNHez+p6QZf971Y/vUb81Phe1OIv5MVZLqxZojOXKdVgCaNJgE+tn6JbqTDvSV
      rAls2C+PrcAeXN5XNUyubxdmoNeDBznxHRAUz4RsmCMlzedEw1W50H+xSHL0XtmX
      tJpz9ViggXDyrwhGE1sAPLw8wTk5Z8A9zuiq2k2798Dai3ZJwbHlSEd5yiealzRF
      p5un1igLS0QLAWZJgrFdIFnNCTPQXRy1dumO3vVB/l3AzOtC16pu7eGj8+QvXcXE
      8Tk+xeaJXZMhgtsiTq4UM11XpfaCqGu8gdrVDuGsuE2B4nY/5h1c+zlXat1ogfk=
      -----END CERTIFICATE-----
  metadata:
    creationTimestamp: "2021-06-01T09:30:23Z"
    labels:
      app: antrea
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
      manager: antrea-controller
      operation: Update
      time: "2021-06-01T09:30:23Z"
    name: antrea-ca
    namespace: kube-system
    resourceVersion: "1201227"
    uid: 6b393de1-9b29-4bd1-a1f8-0e688de0dfdf
- data:
    uuid: 53fe818f-1da3-46dc-9431-28c2775a6845
  metadata:
    creationTimestamp: "2021-06-01T09:30:23Z"
    labels:
      app: antrea
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:uuid: {}
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
      manager: antrea-controller
      operation: Update
      time: "2021-06-01T09:30:23Z"
    name: antrea-cluster-identity
    namespace: kube-system
    resourceVersion: "987"
    uid: 8ea2533e-f66a-4e9f-ac55-285453c76832
metadata:
  resourceVersion: "1245015"
---
#deployments
items:
- metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"antrea","component":"antrea-controller"},"name":"antrea-controller","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"antrea","component":"antrea-controller"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app":"antrea","component":"antrea-controller"}},"spec":{"containers":[{"args":["--config","/etc/antrea/antrea-controller.conf","--logtostderr=false","--log_dir=/var/log/antrea","--alsologtostderr","--log_file_max_size=100","--log_file_max_num=4","--v=4"],"command":["antrea-controller"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"SERVICEACCOUNT_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.serviceAccountName"}}},{"name":"ANTREA_CONFIG_MAP_NAME","value":"antrea-config-cbfh568k9m"}],"image":"projects.registry.vmware.com/antrea/antrea-ubuntu:latest","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":5,"httpGet":{"host":"localhost","path":"/livez","port":"api","scheme":"HTTPS"},"periodSeconds":10,"timeoutSeconds":5},"name":"antrea-controller","ports":[{"containerPort":10349,"name":"api","protocol":"TCP"}],"readinessProbe":{"failureThreshold":5,"httpGet":{"host":"localhost","path":"/readyz","port":"api","scheme":"HTTPS"},"initialDelaySeconds":5,"periodSeconds":10,"timeoutSeconds":5},"resources":{"requests":{"cpu":"200m"}},"volumeMounts":[{"mountPath":"/etc/antrea/antrea-controller.conf","name":"antrea-config","readOnly":true,"subPath":"antrea-controller.conf"},{"mountPath":"/var/run/antrea/antrea-controller-tls","name":"antrea-controller-tls"},{"mountPath":"/var/log/antrea","name":"host-var-log-antrea"}]}],"hostNetwork":true,"nodeSelector":{"kubernetes.io/os":"linux"},"priorityClassName":"system-cluster-critical","serviceAccountName":"antrea-controller","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"configMap":{"name":"antrea-config-cbfh568k9m"},"name":"antrea-config"},{"name":"antrea-controller-tls","secret":{"defaultMode":256,"optional":true,"secretName":"antrea-controller-tls"}},{"hostPath":{"path":"/var/log/antrea","type":"DirectoryOrCreate"},"name":"host-var-log-antrea"}]}}}}
    creationTimestamp: "2021-06-01T09:27:23Z"
    generation: 3
    labels:
      app: antrea
      component: antrea-controller
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:spec:
              f:containers:
                k:{"name":"antrea-controller"}:
                  f:args: {}
      manager: kubectl-edit
      operation: Update
      time: "2021-06-08T07:39:00Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
            f:spec:
              f:containers:
                k:{"name":"antrea-controller"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"ANTREA_CONFIG_MAP_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICEACCOUNT_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":10349,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/antrea/antrea-controller.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/log/antrea"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/antrea/antrea-controller-tls"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"antrea-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"antrea-controller-tls"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"host-var-log-antrea"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-06-11T01:01:44Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T08:19:47Z"
    name: antrea-controller
    namespace: kube-system
    resourceVersion: "1201247"
    uid: 7980b7b2-6c95-49a4-be04-56c571406e87
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: antrea
        component: antrea-controller
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: antrea
          component: antrea-controller
      spec:
        containers:
        - args:
          - --config
          - /etc/antrea/antrea-controller.conf
          - --logtostderr=false
          - --log_dir=/var/log/antrea
          - --alsologtostderr
          - --log_file_max_size=100
          - --log_file_max_num=4
          - --v=4
          command:
          - antrea-controller
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: SERVICEACCOUNT_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: ANTREA_CONFIG_MAP_NAME
            value: antrea-config-cbfh568k9m
          image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /livez
              port: api
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: antrea-controller
          ports:
          - containerPort: 10349
            hostPort: 10349
            name: api
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /readyz
              port: api
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/antrea/antrea-controller.conf
            name: antrea-config
            readOnly: true
            subPath: antrea-controller.conf
          - mountPath: /var/run/antrea/antrea-controller-tls
            name: antrea-controller-tls
          - mountPath: /var/log/antrea
            name: host-var-log-antrea
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: antrea-controller
        serviceAccountName: antrea-controller
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            name: antrea-config-cbfh568k9m
          name: antrea-config
        - name: antrea-controller-tls
          secret:
            defaultMode: 256
            optional: true
            secretName: antrea-controller-tls
        - hostPath:
            path: /var/log/antrea
            type: DirectoryOrCreate
          name: host-var-log-antrea
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-06-01T09:27:23Z"
      lastUpdateTime: "2021-06-11T01:02:07Z"
      message: ReplicaSet "antrea-controller-d467f5d64" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-07-05T08:19:47Z"
      lastUpdateTime: "2021-07-05T08:19:47Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"antrea","component":"antrea-octant"},"name":"antrea-octant","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"antrea","component":"antrea-octant"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"labels":{"app":"antrea","component":"antrea-octant"}},"spec":{"containers":[{"args":["-v"],"command":["octant"],"env":[{"name":"OCTANT_ACCEPTED_HOSTS","value":"0.0.0.0"},{"name":"OCTANT_LISTENER_ADDR","value":"0.0.0.0:80"},{"name":"OCTANT_DISABLE_OPEN_BROWSER","value":"true"},{"name":"KUBECONFIG","value":"/kube/admin.conf"}],"image":"projects.registry.vmware.com/antrea/octant-antrea-ubuntu:latest","imagePullPolicy":"IfNotPresent","name":"antrea-octant","ports":[{"containerPort":80}],"volumeMounts":[{"mountPath":"/kube/","name":"kubeconfig"}]}],"priorityClassName":"system-cluster-critical","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"name":"kubeconfig","secret":{"defaultMode":256,"secretName":"octant-kubeconfig"}}]}}}}
    creationTimestamp: "2021-06-08T02:15:42Z"
    generation: 1
    labels:
      app: antrea
      component: antrea-octant
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
            f:spec:
              f:containers:
                k:{"name":"antrea-octant"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"KUBECONFIG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"OCTANT_ACCEPTED_HOSTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"OCTANT_DISABLE_OPEN_BROWSER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"OCTANT_LISTENER_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/kube/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kubeconfig"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-06-08T02:15:42Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:10:50Z"
    name: antrea-octant
    namespace: kube-system
    resourceVersion: "1206549"
    uid: 74077ea9-6139-4772-b23d-07bc0b87c9df
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: antrea
        component: antrea-octant
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: antrea
          component: antrea-octant
      spec:
        containers:
        - args:
          - -v
          command:
          - octant
          env:
          - name: OCTANT_ACCEPTED_HOSTS
            value: 0.0.0.0
          - name: OCTANT_LISTENER_ADDR
            value: 0.0.0.0:80
          - name: OCTANT_DISABLE_OPEN_BROWSER
            value: "true"
          - name: KUBECONFIG
            value: /kube/admin.conf
          image: projects.registry.vmware.com/antrea/octant-antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          name: antrea-octant
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kube/
            name: kubeconfig
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubeconfig
          secret:
            defaultMode: 256
            secretName: octant-kubeconfig
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-06-08T02:15:42Z"
      lastUpdateTime: "2021-06-08T02:15:59Z"
      message: ReplicaSet "antrea-octant-77df764cb7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-07-05T09:10:50Z"
      lastUpdateTime: "2021-07-05T09:10:50Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-06-01T09:26:37Z"
    generation: 1
    labels:
      k8s-app: kube-dns
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
      manager: kubeadm
      operation: Update
      time: "2021-06-01T09:26:37Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:25:05Z"
    name: coredns
    namespace: kube-system
    resourceVersion: "1207619"
    uid: 4934a2c0-ba86-4af3-ae42-0f2f90ad7329
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns/coredns:v1.8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-06-01T09:26:52Z"
      lastUpdateTime: "2021-06-01T09:30:21Z"
      message: ReplicaSet "coredns-558bd4d5db" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-07-05T09:25:02Z"
      lastUpdateTime: "2021-07-05T09:25:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2021-06-18T06:03:46Z"
    generation: 3
    labels:
      app: helm
      name: tiller
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"tiller"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"TILLER_HISTORY_MAX"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TILLER_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":44134,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":44135,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: helm
      operation: Update
      time: "2021-06-18T06:03:46Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:spec:
              f:containers:
                k:{"name":"tiller"}:
                  f:image: {}
      manager: kubectl-edit
      operation: Update
      time: "2021-06-20T09:47:05Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T05:26:51Z"
    name: tiller-deploy
    namespace: kube-system
    resourceVersion: "1188284"
    uid: 23d0f5c3-743c-443b-8d96-239a2ad06ddf
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: helm
        name: tiller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: helm
          name: tiller
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: TILLER_NAMESPACE
            value: kube-system
          - name: TILLER_HISTORY_MAX
            value: "0"
          image: jessestuart/tiller:v2.16.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: tiller
          ports:
          - containerPort: 44134
            name: tiller
            protocol: TCP
          - containerPort: 44135
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tiller
        serviceAccountName: tiller
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-06-18T06:03:46Z"
      lastUpdateTime: "2021-06-20T09:47:29Z"
      message: ReplicaSet "tiller-deploy-6498444d69" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-07-05T05:26:51Z"
      lastUpdateTime: "2021-07-05T05:26:51Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-06-18T06:42:16Z"
    generation: 1
    labels:
      app: tsi-vault
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"tsi-vault"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"HOME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SKIP_CHOWN"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SKIP_SETCAP"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-create
      operation: Update
      time: "2021-06-18T06:42:16Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T05:26:51Z"
    name: tsi-vault
    namespace: tsi-vault
    resourceVersion: "1188283"
    uid: b5454f98-7799-4ff7-a048-810ec8743420
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: tsi-vault
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: tsi-vault
        name: tsi-vault
      spec:
        containers:
        - env:
          - name: SKIP_SETCAP
            value: "true"
          - name: SKIP_CHOWN
            value: "true"
          - name: HOME
            value: /tmp
          image: tsidentity/ti-vault:v1.8.4
          imagePullPolicy: Always
          name: tsi-vault
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-06-18T06:42:16Z"
      lastUpdateTime: "2021-06-18T06:43:29Z"
      message: ReplicaSet "tsi-vault-54579454f8" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-07-05T05:26:51Z"
      lastUpdateTime: "2021-07-05T05:26:51Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
metadata:
  resourceVersion: "1244972"
---
#replicas
items:
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2021-06-11T01:01:56Z"
    generation: 1
    labels:
      app: antrea
      component: antrea-controller
      pod-template-hash: d467f5d64
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7980b7b2-6c95-49a4-be04-56c571406e87"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"antrea-controller"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"ANTREA_CONFIG_MAP_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICEACCOUNT_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":10349,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/antrea/antrea-controller.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/log/antrea"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/antrea/antrea-controller-tls"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"antrea-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"antrea-controller-tls"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"host-var-log-antrea"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T08:19:46Z"
    name: antrea-controller-d467f5d64
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: antrea-controller
      uid: 7980b7b2-6c95-49a4-be04-56c571406e87
    resourceVersion: "1201245"
    uid: 674808fb-2158-4ec7-a4b0-b73cc35cf287
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: antrea
        component: antrea-controller
        pod-template-hash: d467f5d64
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: antrea
          component: antrea-controller
          pod-template-hash: d467f5d64
      spec:
        containers:
        - args:
          - --config
          - /etc/antrea/antrea-controller.conf
          - --logtostderr=false
          - --log_dir=/var/log/antrea
          - --alsologtostderr
          - --log_file_max_size=100
          - --log_file_max_num=4
          - --v=4
          command:
          - antrea-controller
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: SERVICEACCOUNT_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: ANTREA_CONFIG_MAP_NAME
            value: antrea-config-cbfh568k9m
          image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /livez
              port: api
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: antrea-controller
          ports:
          - containerPort: 10349
            hostPort: 10349
            name: api
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /readyz
              port: api
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/antrea/antrea-controller.conf
            name: antrea-config
            readOnly: true
            subPath: antrea-controller.conf
          - mountPath: /var/run/antrea/antrea-controller-tls
            name: antrea-controller-tls
          - mountPath: /var/log/antrea
            name: host-var-log-antrea
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: antrea-controller
        serviceAccountName: antrea-controller
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            name: antrea-config-cbfh568k9m
          name: antrea-config
        - name: antrea-controller-tls
          secret:
            defaultMode: 256
            optional: true
            secretName: antrea-controller-tls
        - hostPath:
            path: /var/log/antrea
            type: DirectoryOrCreate
          name: host-var-log-antrea
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-06-08T02:15:42Z"
    generation: 1
    labels:
      app: antrea
      component: antrea-octant
      pod-template-hash: 77df764cb7
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"74077ea9-6139-4772-b23d-07bc0b87c9df"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"antrea-octant"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"KUBECONFIG"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"OCTANT_ACCEPTED_HOSTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"OCTANT_DISABLE_OPEN_BROWSER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"OCTANT_LISTENER_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/kube/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kubeconfig"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:10:50Z"
    name: antrea-octant-77df764cb7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: antrea-octant
      uid: 74077ea9-6139-4772-b23d-07bc0b87c9df
    resourceVersion: "1206547"
    uid: 29b5ecdb-5b91-4cd6-bec3-d0f93e686ae1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: antrea
        component: antrea-octant
        pod-template-hash: 77df764cb7
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: antrea
          component: antrea-octant
          pod-template-hash: 77df764cb7
      spec:
        containers:
        - args:
          - -v
          command:
          - octant
          env:
          - name: OCTANT_ACCEPTED_HOSTS
            value: 0.0.0.0
          - name: OCTANT_LISTENER_ADDR
            value: 0.0.0.0:80
          - name: OCTANT_DISABLE_OPEN_BROWSER
            value: "true"
          - name: KUBECONFIG
            value: /kube/admin.conf
          image: projects.registry.vmware.com/antrea/octant-antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          name: antrea-octant
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kube/
            name: kubeconfig
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubeconfig
          secret:
            defaultMode: 256
            secretName: octant-kubeconfig
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-06-01T09:26:52Z"
    generation: 1
    labels:
      k8s-app: kube-dns
      pod-template-hash: 558bd4d5db
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4934a2c0-ba86-4af3-ae42-0f2f90ad7329"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:25:02Z"
    name: coredns-558bd4d5db
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: 4934a2c0-ba86-4af3-ae42-0f2f90ad7329
    resourceVersion: "1207617"
    uid: 5a2c8cc8-0938-4643-b5af-546836e82ccb
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: 558bd4d5db
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: 558bd4d5db
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns/coredns:v1.8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2021-06-20T09:47:05Z"
    generation: 2
    labels:
      app: helm
      name: tiller
      pod-template-hash: 6498444d69
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"23d0f5c3-743c-443b-8d96-239a2ad06ddf"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:pod-template-hash: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"tiller"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"TILLER_HISTORY_MAX"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TILLER_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":44134,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":44135,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T05:26:51Z"
    name: tiller-deploy-6498444d69
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tiller-deploy
      uid: 23d0f5c3-743c-443b-8d96-239a2ad06ddf
    resourceVersion: "1188281"
    uid: 9828e14d-dee7-47cb-ada6-146f33ffd613
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: helm
        name: tiller
        pod-template-hash: 6498444d69
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: helm
          name: tiller
          pod-template-hash: 6498444d69
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: TILLER_NAMESPACE
            value: kube-system
          - name: TILLER_HISTORY_MAX
            value: "0"
          image: jessestuart/tiller:v2.16.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: tiller
          ports:
          - containerPort: 44134
            name: tiller
            protocol: TCP
          - containerPort: 44135
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tiller
        serviceAccountName: tiller
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-06-18T06:03:46Z"
    generation: 2
    labels:
      app: helm
      name: tiller
      pod-template-hash: 69df97ff8b
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"23d0f5c3-743c-443b-8d96-239a2ad06ddf"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:pod-template-hash: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"tiller"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"TILLER_HISTORY_MAX"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TILLER_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":44134,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":44135,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-06-20T09:47:29Z"
    name: tiller-deploy-69df97ff8b
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tiller-deploy
      uid: 23d0f5c3-743c-443b-8d96-239a2ad06ddf
    resourceVersion: "559902"
    uid: eea5db66-228a-4220-90bd-cbcb049bfa4c
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: helm
        name: tiller
        pod-template-hash: 69df97ff8b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: helm
          name: tiller
          pod-template-hash: 69df97ff8b
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: TILLER_NAMESPACE
            value: kube-system
          - name: TILLER_HISTORY_MAX
            value: "0"
          image: gcrxio/tiller:v2.14.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: tiller
          ports:
          - containerPort: 44134
            name: tiller
            protocol: TCP
          - containerPort: 44135
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tiller
        serviceAccountName: tiller
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-06-18T06:42:16Z"
    generation: 1
    labels:
      app: tsi-vault
      pod-template-hash: 54579454f8
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"b5454f98-7799-4ff7-a048-810ec8743420"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"tsi-vault"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"HOME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SKIP_CHOWN"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SKIP_SETCAP"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T05:26:51Z"
    name: tsi-vault-54579454f8
    namespace: tsi-vault
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tsi-vault
      uid: b5454f98-7799-4ff7-a048-810ec8743420
    resourceVersion: "1188279"
    uid: 9494ea13-2a1b-4733-9d3d-a55f5fa097ad
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: tsi-vault
        pod-template-hash: 54579454f8
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: tsi-vault
          pod-template-hash: 54579454f8
        name: tsi-vault
      spec:
        containers:
        - env:
          - name: SKIP_SETCAP
            value: "true"
          - name: SKIP_CHOWN
            value: "true"
          - name: HOME
            value: /tmp
          image: tsidentity/ti-vault:v1.8.4
          imagePullPolicy: Always
          name: tsi-vault
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-06-01T09:27:23Z"
    generation: 2
    labels:
      app: antrea
      component: antrea-controller
      pod-template-hash: 6996f5fc44
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7980b7b2-6c95-49a4-be04-56c571406e87"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"antrea-controller"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICEACCOUNT_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":10349,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/antrea/antrea-controller.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/log/antrea"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/antrea/antrea-controller-tls"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"antrea-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"antrea-controller-tls"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"host-var-log-antrea"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-06-08T07:39:00Z"
    name: antrea-controller-6996f5fc44
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: antrea-controller
      uid: 7980b7b2-6c95-49a4-be04-56c571406e87
    resourceVersion: "210784"
    uid: c283575b-bcb6-4ce2-a8b0-37bc5d4cd9fb
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: antrea
        component: antrea-controller
        pod-template-hash: 6996f5fc44
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: antrea
          component: antrea-controller
          pod-template-hash: 6996f5fc44
      spec:
        containers:
        - args:
          - --config
          - /etc/antrea/antrea-controller.conf
          - --logtostderr=false
          - --log_dir=/var/log/antrea
          - --alsologtostderr
          - --log_file_max_size=100
          - --log_file_max_num=4
          - --v=0
          command:
          - antrea-controller
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: SERVICEACCOUNT_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /livez
              port: api
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: antrea-controller
          ports:
          - containerPort: 10349
            hostPort: 10349
            name: api
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /readyz
              port: api
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/antrea/antrea-controller.conf
            name: antrea-config
            readOnly: true
            subPath: antrea-controller.conf
          - mountPath: /var/run/antrea/antrea-controller-tls
            name: antrea-controller-tls
          - mountPath: /var/log/antrea
            name: host-var-log-antrea
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: antrea-controller
        serviceAccountName: antrea-controller
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            name: antrea-config-cbfh568k9m
          name: antrea-config
        - name: antrea-controller-tls
          secret:
            defaultMode: 256
            optional: true
            secretName: antrea-controller-tls
        - hostPath:
            path: /var/log/antrea
            type: DirectoryOrCreate
          name: host-var-log-antrea
  status:
    observedGeneration: 2
    replicas: 0
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2021-06-20T09:44:49Z"
    generation: 2
    labels:
      app: helm
      name: tiller
      pod-template-hash: 6cccfdcd56
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"23d0f5c3-743c-443b-8d96-239a2ad06ddf"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:pod-template-hash: {}
            f:spec:
              f:automountServiceAccountToken: {}
              f:containers:
                k:{"name":"tiller"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"TILLER_HISTORY_MAX"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TILLER_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":44134,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":44135,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-06-20T09:47:05Z"
    name: tiller-deploy-6cccfdcd56
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tiller-deploy
      uid: 23d0f5c3-743c-443b-8d96-239a2ad06ddf
    resourceVersion: "559839"
    uid: abc44b68-2357-4328-a667-fc48d8b37e49
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: helm
        name: tiller
        pod-template-hash: 6cccfdcd56
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: helm
          name: tiller
          pod-template-hash: 6cccfdcd56
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: TILLER_NAMESPACE
            value: kube-system
          - name: TILLER_HISTORY_MAX
            value: "0"
          image: gcr.io/kubernetes-helm/tiller:v2.16.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: tiller
          ports:
          - containerPort: 44134
            name: tiller
            protocol: TCP
          - containerPort: 44135
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 44135
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tiller
        serviceAccountName: tiller
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2021-06-08T07:39:03Z"
    generation: 2
    labels:
      app: antrea
      component: antrea-controller
      pod-template-hash: d4b7f78b8
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7980b7b2-6c95-49a4-be04-56c571406e87"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"antrea-controller"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SERVICEACCOUNT_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":10349,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/antrea/antrea-controller.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/log/antrea"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/antrea/antrea-controller-tls"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"antrea-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"antrea-controller-tls"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:optional: {}
                    f:secretName: {}
                k:{"name":"host-var-log-antrea"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-06-11T01:01:44Z"
    name: antrea-controller-d4b7f78b8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: antrea-controller
      uid: 7980b7b2-6c95-49a4-be04-56c571406e87
    resourceVersion: "316446"
    uid: 4f4944fd-185b-48b2-b57e-f06dec740b6c
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: antrea
        component: antrea-controller
        pod-template-hash: d4b7f78b8
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: antrea
          component: antrea-controller
          pod-template-hash: d4b7f78b8
      spec:
        containers:
        - args:
          - --config
          - /etc/antrea/antrea-controller.conf
          - --logtostderr=false
          - --log_dir=/var/log/antrea
          - --alsologtostderr
          - --log_file_max_size=100
          - --log_file_max_num=4
          - --v=4
          command:
          - antrea-controller
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: SERVICEACCOUNT_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /livez
              port: api
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: antrea-controller
          ports:
          - containerPort: 10349
            hostPort: 10349
            name: api
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /readyz
              port: api
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/antrea/antrea-controller.conf
            name: antrea-config
            readOnly: true
            subPath: antrea-controller.conf
          - mountPath: /var/run/antrea/antrea-controller-tls
            name: antrea-controller-tls
          - mountPath: /var/log/antrea
            name: host-var-log-antrea
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: antrea-controller
        serviceAccountName: antrea-controller
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            name: antrea-config-cbfh568k9m
          name: antrea-config
        - name: antrea-controller-tls
          secret:
            defaultMode: 256
            optional: true
            secretName: antrea-controller-tls
        - hostPath:
            path: /var/log/antrea
            type: DirectoryOrCreate
          name: host-var-log-antrea
  status:
    observedGeneration: 2
    replicas: 0
metadata:
  resourceVersion: "1245184"
---
#daemonsets
items:
- metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"pv","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"provisioner","helm.sh/chart":"provisioner-2.5.0"},"name":"pv-provisioner","namespace":"default"},"spec":{"selector":{"matchLabels":{"app.kubernetes.io/instance":"pv","app.kubernetes.io/name":"provisioner"}},"template":{"metadata":{"annotations":{"checksum/config":"d0fe713c7f09138881a3f1afb8fd33f96f56a00076d73913405c7969097d02fb"},"labels":{"app.kubernetes.io/instance":"pv","app.kubernetes.io/name":"provisioner"}},"spec":{"containers":[{"env":[{"name":"MY_NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"MY_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"JOB_CONTAINER_IMAGE","value":"hangyan/local-volume-provisioner:v2.4.0"}],"image":"hangyan/local-volume-provisioner:v2.4.0","name":"provisioner","ports":[{"containerPort":8080,"name":"metrics"}],"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/etc/provisioner/config","name":"provisioner-config","readOnly":true},{"mountPath":"/dev","name":"provisioner-dev"},{"mountPath":"/mnt/fast-disks","mountPropagation":"HostToContainer","name":"fast-disks"}]}],"serviceAccountName":"pv-provisioner","volumes":[{"configMap":{"name":"pv-provisioner-config"},"name":"provisioner-config"},{"hostPath":{"path":"/dev"},"name":"provisioner-dev"},{"hostPath":{"path":"/mnt/fast-disks"},"name":"fast-disks"}]}}}}
    creationTimestamp: "2021-06-21T08:56:58Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: pv
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: provisioner
      helm.sh/chart: provisioner-2.5.0
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:helm.sh/chart: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:checksum/config: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
            f:spec:
              f:containers:
                k:{"name":"provisioner"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JOB_CONTAINER_IMAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"MY_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"MY_NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/dev"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/provisioner/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/mnt/fast-disks"}:
                      .: {}
                      f:mountPath: {}
                      f:mountPropagation: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"fast-disks"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"provisioner-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"provisioner-dev"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-06-21T08:56:58Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberMisscheduled: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T05:26:51Z"
    name: pv-provisioner
    namespace: default
    resourceVersion: "1207629"
    uid: 539c494c-d762-47b9-8754-5c90f4743e80
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: pv
        app.kubernetes.io/name: provisioner
    template:
      metadata:
        annotations:
          checksum/config: d0fe713c7f09138881a3f1afb8fd33f96f56a00076d73913405c7969097d02fb
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: pv
          app.kubernetes.io/name: provisioner
      spec:
        containers:
        - env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MY_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: JOB_CONTAINER_IMAGE
            value: hangyan/local-volume-provisioner:v2.4.0
          image: hangyan/local-volume-provisioner:v2.4.0
          imagePullPolicy: IfNotPresent
          name: provisioner
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/provisioner/config
            name: provisioner-config
            readOnly: true
          - mountPath: /dev
            name: provisioner-dev
          - mountPath: /mnt/fast-disks
            mountPropagation: HostToContainer
            name: fast-disks
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: pv-provisioner
        serviceAccountName: pv-provisioner
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: pv-provisioner-config
          name: provisioner-config
        - hostPath:
            path: /dev
            type: ""
          name: provisioner-dev
        - hostPath:
            path: /mnt/fast-disks
            type: ""
          name: fast-disks
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- metadata:
    annotations:
      deprecated.daemonset.template.generation: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"app":"antrea","component":"antrea-agent"},"name":"antrea-agent","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"app":"antrea","component":"antrea-agent"}},"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/default-container":"antrea-agent"},"labels":{"app":"antrea","component":"antrea-agent"}},"spec":{"containers":[{"args":["--config","/etc/antrea/antrea-agent.conf","--logtostderr=false","--log_dir=/var/log/antrea","--alsologtostderr","--log_file_max_size=100","--log_file_max_num=4","--v=4"],"command":["antrea-agent"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}}],"image":"projects.registry.vmware.com/antrea/antrea-ubuntu:latest","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["/bin/sh","-c","container_liveness_probe agent"]},"failureThreshold":5,"initialDelaySeconds":5,"periodSeconds":10,"timeoutSeconds":5},"name":"antrea-agent","ports":[{"containerPort":10350,"name":"api","protocol":"TCP"}],"readinessProbe":{"failureThreshold":5,"httpGet":{"host":"localhost","path":"/readyz","port":"api","scheme":"HTTPS"},"initialDelaySeconds":5,"periodSeconds":10,"timeoutSeconds":5},"resources":{"requests":{"cpu":"200m"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/etc/antrea/antrea-agent.conf","name":"antrea-config","readOnly":true,"subPath":"antrea-agent.conf"},{"mountPath":"/var/run/antrea","name":"host-var-run-antrea"},{"mountPath":"/var/run/openvswitch","name":"host-var-run-antrea","subPath":"openvswitch"},{"mountPath":"/var/lib/cni","name":"host-var-run-antrea","subPath":"cni"},{"mountPath":"/var/log/antrea","name":"host-var-log-antrea"},{"mountPath":"/host/proc","name":"host-proc","readOnly":true},{"mountPath":"/host/var/run/netns","mountPropagation":"HostToContainer","name":"host-var-run-netns","readOnly":true},{"mountPath":"/run/xtables.lock","name":"xtables-lock"}]},{"args":["--log_file_max_size=100","--log_file_max_num=4"],"command":["start_ovs"],"image":"projects.registry.vmware.com/antrea/antrea-ubuntu:latest","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["/bin/sh","-c","timeout 10 container_liveness_probe ovs"]},"failureThreshold":5,"initialDelaySeconds":5,"periodSeconds":10,"timeoutSeconds":10},"name":"antrea-ovs","resources":{"requests":{"cpu":"200m"}},"securityContext":{"capabilities":{"add":["SYS_NICE","NET_ADMIN","SYS_ADMIN","IPC_LOCK"]}},"volumeMounts":[{"mountPath":"/var/run/openvswitch","name":"host-var-run-antrea","subPath":"openvswitch"},{"mountPath":"/var/log/openvswitch","name":"host-var-log-antrea","subPath":"openvswitch"}]}],"dnsPolicy":"ClusterFirstWithHostNet","hostNetwork":true,"initContainers":[{"command":["install_cni"],"image":"projects.registry.vmware.com/antrea/antrea-ubuntu:latest","imagePullPolicy":"IfNotPresent","name":"install-cni","resources":{"requests":{"cpu":"100m"}},"securityContext":{"capabilities":{"add":["SYS_MODULE"]}},"volumeMounts":[{"mountPath":"/etc/antrea/antrea-cni.conflist","name":"antrea-config","readOnly":true,"subPath":"antrea-cni.conflist"},{"mountPath":"/host/etc/cni/net.d","name":"host-cni-conf"},{"mountPath":"/host/opt/cni/bin","name":"host-cni-bin"},{"mountPath":"/lib/modules","name":"host-lib-modules","readOnly":true},{"mountPath":"/var/run/antrea","name":"host-var-run-antrea"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"priorityClassName":"system-node-critical","serviceAccountName":"antrea-agent","tolerations":[{"key":"CriticalAddonsOnly","operator":"Exists"},{"effect":"NoSchedule","operator":"Exists"},{"effect":"NoExecute","operator":"Exists"}],"volumes":[{"configMap":{"name":"antrea-config-cbfh568k9m"},"name":"antrea-config"},{"hostPath":{"path":"/etc/cni/net.d"},"name":"host-cni-conf"},{"hostPath":{"path":"/opt/cni/bin"},"name":"host-cni-bin"},{"hostPath":{"path":"/proc"},"name":"host-proc"},{"hostPath":{"path":"/var/run/netns"},"name":"host-var-run-netns"},{"hostPath":{"path":"/var/run/antrea","type":"DirectoryOrCreate"},"name":"host-var-run-antrea"},{"hostPath":{"path":"/var/log/antrea","type":"DirectoryOrCreate"},"name":"host-var-log-antrea"},{"hostPath":{"path":"/lib/modules"},"name":"host-lib-modules"},{"hostPath":{"path":"/run/xtables.lock","type":"FileOrCreate"},"name":"xtables-lock"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: "2021-06-01T09:27:23Z"
    generation: 2
    labels:
      app: antrea
      component: antrea-agent
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:kubectl.kubernetes.io/default-container: {}
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
            f:spec:
              f:containers:
                k:{"name":"antrea-agent"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":10350,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/antrea/antrea-agent.conf"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/host/proc"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/host/var/run/netns"}:
                      .: {}
                      f:mountPath: {}
                      f:mountPropagation: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/cni"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/log/antrea"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/antrea"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/openvswitch"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                k:{"name":"antrea-ovs"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/var/log/openvswitch"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/run/openvswitch"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:initContainers:
                .: {}
                k:{"name":"install-cni"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/antrea/antrea-cni.conflist"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/host/etc/cni/net.d"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/host/opt/cni/bin"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/run/antrea"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"antrea-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"host-cni-bin"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"host-cni-conf"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"host-lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"host-proc"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"host-var-log-antrea"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"host-var-run-antrea"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"host-var-run-netns"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-06-01T09:27:23Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:spec:
              f:containers:
                k:{"name":"antrea-agent"}:
                  f:args: {}
      manager: kubectl-edit
      operation: Update
      time: "2021-06-09T05:23:25Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:25:04Z"
    name: antrea-agent
    namespace: kube-system
    resourceVersion: "1207611"
    uid: ea0a0276-5882-4c73-8b13-ab91f328e7f4
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: antrea
        component: antrea-agent
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: antrea-agent
        creationTimestamp: null
        labels:
          app: antrea
          component: antrea-agent
      spec:
        containers:
        - args:
          - --config
          - /etc/antrea/antrea-agent.conf
          - --logtostderr=false
          - --log_dir=/var/log/antrea
          - --alsologtostderr
          - --log_file_max_size=100
          - --log_file_max_num=4
          - --v=4
          command:
          - antrea-agent
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - container_liveness_probe agent
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: antrea-agent
          ports:
          - containerPort: 10350
            hostPort: 10350
            name: api
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /readyz
              port: api
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/antrea/antrea-agent.conf
            name: antrea-config
            readOnly: true
            subPath: antrea-agent.conf
          - mountPath: /var/run/antrea
            name: host-var-run-antrea
          - mountPath: /var/run/openvswitch
            name: host-var-run-antrea
            subPath: openvswitch
          - mountPath: /var/lib/cni
            name: host-var-run-antrea
            subPath: cni
          - mountPath: /var/log/antrea
            name: host-var-log-antrea
          - mountPath: /host/proc
            name: host-proc
            readOnly: true
          - mountPath: /host/var/run/netns
            mountPropagation: HostToContainer
            name: host-var-run-netns
            readOnly: true
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - args:
          - --log_file_max_size=100
          - --log_file_max_num=4
          command:
          - start_ovs
          image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - timeout 10 container_liveness_probe ovs
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: antrea-ovs
          resources:
            requests:
              cpu: 200m
          securityContext:
            capabilities:
              add:
              - SYS_NICE
              - NET_ADMIN
              - SYS_ADMIN
              - IPC_LOCK
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/openvswitch
            name: host-var-run-antrea
            subPath: openvswitch
          - mountPath: /var/log/openvswitch
            name: host-var-log-antrea
            subPath: openvswitch
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        initContainers:
        - command:
          - install_cni
          image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
          imagePullPolicy: IfNotPresent
          name: install-cni
          resources:
            requests:
              cpu: 100m
          securityContext:
            capabilities:
              add:
              - SYS_MODULE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/antrea/antrea-cni.conflist
            name: antrea-config
            readOnly: true
            subPath: antrea-cni.conflist
          - mountPath: /host/etc/cni/net.d
            name: host-cni-conf
          - mountPath: /host/opt/cni/bin
            name: host-cni-bin
          - mountPath: /lib/modules
            name: host-lib-modules
            readOnly: true
          - mountPath: /var/run/antrea
            name: host-var-run-antrea
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: antrea-agent
        serviceAccountName: antrea-agent
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: antrea-config-cbfh568k9m
          name: antrea-config
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: host-cni-conf
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: host-cni-bin
        - hostPath:
            path: /proc
            type: ""
          name: host-proc
        - hostPath:
            path: /var/run/netns
            type: ""
          name: host-var-run-netns
        - hostPath:
            path: /var/run/antrea
            type: DirectoryOrCreate
          name: host-var-run-antrea
        - hostPath:
            path: /var/log/antrea
            type: DirectoryOrCreate
          name: host-var-log-antrea
        - hostPath:
            path: /lib/modules
            type: ""
          name: host-lib-modules
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 2
    updatedNumberScheduled: 2
- metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2021-06-01T09:26:37Z"
    generation: 1
    labels:
      k8s-app: kube-proxy
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/kube-proxy"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: kubeadm
      operation: Update
      time: "2021-06-01T09:26:37Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:25:04Z"
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "1207614"
    uid: f331e819-a578-459d-8d49-12c770ccf8b0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        containers:
        - command:
          - /usr/local/bin/kube-proxy
          - --config=/var/lib/kube-proxy/config.conf
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: k8s.gcr.io/kube-proxy:v1.21.1
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kube-proxy
            name: kube-proxy
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kube-proxy
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
metadata:
  resourceVersion: "1245039"
---
#pods
items:
- metadata:
    creationTimestamp: "2021-07-05T08:23:39Z"
    labels:
      role: web
      run: n3
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:run: {}
        f:spec:
          f:containers:
            k:{"name":"n3"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl-run
      operation: Update
      time: "2021-07-05T08:23:39Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            f:role: {}
      manager: kubectl-label
      operation: Update
      time: "2021-07-05T08:24:53Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.0.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:02Z"
    name: n3
    namespace: default
    resourceVersion: "1207604"
    uid: cd45405d-f2a6-4095-93c9-ee5157ae7268
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: n3
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zqz8r
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-zqz8r
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:23:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:23:54Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:23:54Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:23:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ce7d8094ba5153f44b62899d58e4b28dd573c9418d914c19e50db55d5ba9efc4
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:47ae43cdfc7064d28800bc42e79a429540c7c80168e8c8952778c0d5af1c09db
      lastState: {}
      name: n3
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T08:23:54Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 10.244.0.5
    podIPs:
    - ip: 10.244.0.5
    qosClass: BestEffort
    startTime: "2021-07-05T08:23:39Z"
- metadata:
    annotations:
      checksum/config: d0fe713c7f09138881a3f1afb8fd33f96f56a00076d73913405c7969097d02fb
    creationTimestamp: "2021-06-21T08:56:58Z"
    generateName: pv-provisioner-
    labels:
      app.kubernetes.io/instance: pv
      app.kubernetes.io/name: provisioner
      controller-revision-hash: 5c764b7db6
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/config: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"539c494c-d762-47b9-8754-5c90f4743e80"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"provisioner"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"JOB_CONTAINER_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MY_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"MY_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/provisioner/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/mnt/fast-disks"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"fast-disks"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"provisioner-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"provisioner-dev"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-01T07:41:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.1.34"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T05:26:35Z"
    name: pv-provisioner-f5nz5
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: pv-provisioner
      uid: 539c494c-d762-47b9-8754-5c90f4743e80
    resourceVersion: "1188252"
    uid: 0e522761-52d8-4235-b130-7497e60b51c3
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ubuntu-2
    containers:
    - env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: JOB_CONTAINER_IMAGE
        value: hangyan/local-volume-provisioner:v2.4.0
      image: hangyan/local-volume-provisioner:v2.4.0
      imagePullPolicy: IfNotPresent
      name: provisioner
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/provisioner/config
        name: provisioner-config
        readOnly: true
      - mountPath: /dev
        name: provisioner-dev
      - mountPath: /mnt/fast-disks
        mountPropagation: HostToContainer
        name: fast-disks
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rcjm4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: pv-provisioner
    serviceAccountName: pv-provisioner
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: pv-provisioner-config
      name: provisioner-config
    - hostPath:
        path: /dev
        type: ""
      name: provisioner-dev
    - hostPath:
        path: /mnt/fast-disks
        type: ""
      name: fast-disks
    - name: kube-api-access-rcjm4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-21T08:56:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-21T08:57:13Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-21T08:57:13Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-21T08:56:58Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0725b224549a6cab6cd5cfb469727eb6c24f8d98945f1c74a9f5f7c7b0af78a5
      image: hangyan/local-volume-provisioner:v2.4.0
      imageID: docker-pullable://hangyan/local-volume-provisioner@sha256:27444b7b3c8dd5c9015674607db316fb5b8e45348fa1ccabe2c656a70f93ecf0
      lastState: {}
      name: provisioner
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-06-21T08:57:13Z"
    hostIP: 192.168.227.3
    phase: Running
    podIP: 10.244.1.34
    podIPs:
    - ip: 10.244.1.34
    qosClass: BestEffort
    startTime: "2021-06-21T08:56:58Z"
- metadata:
    creationTimestamp: "2021-06-01T09:26:52Z"
    generateName: coredns-558bd4d5db-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 558bd4d5db
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5a2c8cc8-0938-4643-b5af-546836e82ccb"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:24:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.0.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:02Z"
    name: coredns-558bd4d5db-dztpb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-558bd4d5db
      uid: 5a2c8cc8-0938-4643-b5af-546836e82ccb
    resourceVersion: "1207598"
    uid: 7c6b4087-b377-42bc-b8b8-cb1319c92376
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns/coredns:v1.8.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cnlfm
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ubuntu-1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-cnlfm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-01T09:26:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-01T09:26:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c7adbea35f9ece8796f1727455caffc453188e19a7c498faf26273866903c9c4
      image: coredns/coredns:1.8.0
      imageID: docker-pullable://coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e
      lastState:
        terminated:
          containerID: docker://fbc05087a4b6cda3d3b3cda2d92c860afd1033e3a6a919567aa23cc62dbfac7c
          exitCode: 0
          finishedAt: "2021-07-01T02:48:36Z"
          reason: Completed
          startedAt: "2021-07-01T02:47:38Z"
      name: coredns
      ready: true
      restartCount: 14
      started: true
      state:
        running:
          startedAt: "2021-07-01T02:50:08Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 10.244.0.3
    podIPs:
    - ip: 10.244.0.3
    qosClass: Burstable
    startTime: "2021-06-01T09:26:52Z"
- metadata:
    annotations:
      kubeadm.kubernetes.io/etcd.advertise-client-urls: https://192.168.227.2:2379
      kubernetes.io/config.hash: 4cc4695276db8bb363c6ec6d98edd119
      kubernetes.io/config.mirror: 4cc4695276db8bb363c6ec6d98edd119
      kubernetes.io/config.seen: "2021-06-01T09:26:37.499839568Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-06-01T09:26:41Z"
    labels:
      component: etcd
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubeadm.kubernetes.io/etcd.advertise-client-urls: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"etcd"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:ephemeral-storage: {}
                  f:memory: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/pki/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etcd-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etcd-data"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:02Z"
    name: etcd-ubuntu-1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: ubuntu-1
      uid: fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6
    resourceVersion: "1207597"
    uid: 551f415c-e3d0-49c4-bed7-870955de2219
  spec:
    containers:
    - command:
      - etcd
      - --advertise-client-urls=https://192.168.227.2:2379
      - --cert-file=/etc/kubernetes/pki/etcd/server.crt
      - --client-cert-auth=true
      - --data-dir=/var/lib/etcd
      - --initial-advertise-peer-urls=https://192.168.227.2:2380
      - --initial-cluster=ubuntu-1=https://192.168.227.2:2380
      - --key-file=/etc/kubernetes/pki/etcd/server.key
      - --listen-client-urls=https://127.0.0.1:2379,https://192.168.227.2:2379
      - --listen-metrics-urls=http://127.0.0.1:2381
      - --listen-peer-urls=https://192.168.227.2:2380
      - --name=ubuntu-1
      - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt
      - --peer-client-cert-auth=true
      - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key
      - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      - --snapshot-count=10000
      - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      image: k8s.gcr.io/etcd:3.4.13-0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: etcd
      resources:
        requests:
          cpu: 100m
          ephemeral-storage: 100Mi
          memory: 100Mi
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/etcd
        name: etcd-data
      - mountPath: /etc/kubernetes/pki/etcd
        name: etcd-certs
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ubuntu-1
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/pki/etcd
        type: DirectoryOrCreate
      name: etcd-certs
    - hostPath:
        path: /var/lib/etcd
        type: DirectoryOrCreate
      name: etcd-data
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T10:25:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T10:25:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://61c6560f33872156ca637cb49bc274c097366f9f56e45059dfd11a445c27d828
      image: wanan/etcd:3.4.13-0
      imageID: docker-pullable://wanan/etcd@sha256:bd4d2c9a19be8a492bc79df53eee199fd04b415e9993eb69f7718052602a147a
      lastState:
        terminated:
          containerID: docker://c166d15fb60ab8d2f2bea5a70736a3b559d451ce866a74fd4c5ac648d858d3da
          exitCode: 0
          finishedAt: "2021-07-01T02:48:30Z"
          reason: Completed
          startedAt: "2021-07-01T02:47:19Z"
      name: etcd
      ready: true
      restartCount: 25
      started: true
      state:
        running:
          startedAt: "2021-07-01T02:49:48Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 192.168.227.2
    podIPs:
    - ip: 192.168.227.2
    qosClass: Burstable
    startTime: "2021-06-20T10:25:03Z"
- metadata:
    annotations:
      kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 192.168.227.2:6443
      kubernetes.io/config.hash: 1566c7fb29d30f867bac7d9d6ed42ad1
      kubernetes.io/config.mirror: 1566c7fb29d30f867bac7d9d6ed42ad1
      kubernetes.io/config.seen: "2021-06-01T09:26:37.499840729Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-06-01T09:26:41Z"
    labels:
      component: kube-apiserver
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-apiserver"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/local/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"ca-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-pki"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"k8s-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-local-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-06T01:14:54Z"
    name: kube-apiserver-ubuntu-1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: ubuntu-1
      uid: fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6
    resourceVersion: "1226928"
    uid: 9198ebdd-3730-4fff-b928-710ddd0a66ad
  spec:
    containers:
    - command:
      - kube-apiserver
      - --advertise-address=192.168.227.2
      - --allow-privileged=true
      - --authorization-mode=Node,RBAC
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --enable-admission-plugins=NodeRestriction
      - --enable-bootstrap-token-auth=true
      - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
      - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
      - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
      - --etcd-servers=https://127.0.0.1:2379
      - --insecure-port=0
      - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
      - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
      - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
      - --requestheader-allowed-names=front-proxy-client
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --secure-port=6443
      - --service-account-issuer=https://kubernetes.default.svc.cluster.local
      - --service-account-key-file=/etc/kubernetes/pki/sa.pub
      - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
      - --service-cluster-ip-range=10.96.0.0/12
      - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
      - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      image: k8s.gcr.io/kube-apiserver:v1.21.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 192.168.227.2
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-apiserver
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 192.168.227.2
          path: /readyz
          port: 6443
          scheme: HTTPS
        periodSeconds: 1
        successThreshold: 1
        timeoutSeconds: 15
      resources:
        requests:
          cpu: 250m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 192.168.227.2
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /etc/pki
        name: etc-pki
        readOnly: true
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ubuntu-1
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /etc/pki
        type: DirectoryOrCreate
      name: etc-pki
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-13T02:04:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-06T01:14:54Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-06T01:14:54Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-13T02:04:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a51cc1181c8a9a5b6c36b36869a0d404c2fdae5e6ca3da5b5648a6940f920900
      image: aiotceo/kube-apiserver:v1.21.1
      imageID: docker-pullable://aiotceo/kube-apiserver@sha256:c81aabdc567a1858c62fb939e4d54abe3854087c9c683ac9bf1a60137b272258
      lastState:
        terminated:
          containerID: docker://83ae11cdb2281440f49af9b79106acef6a11abfdb7f17a3c99183484bd81abab
          exitCode: 137
          finishedAt: "2021-07-01T02:48:40Z"
          reason: Error
          startedAt: "2021-07-01T02:47:18Z"
      name: kube-apiserver
      ready: true
      restartCount: 47
      started: true
      state:
        running:
          startedAt: "2021-07-01T02:49:48Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 192.168.227.2
    podIPs:
    - ip: 192.168.227.2
    qosClass: Burstable
    startTime: "2021-06-13T02:04:21Z"
- metadata:
    creationTimestamp: "2021-06-01T09:26:52Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 6bc6858f58
      k8s-app: kube-proxy
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f331e819-a578-459d-8d49-12c770ccf8b0"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:24:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:04Z"
    name: kube-proxy-4sxxv
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: f331e819-a578-459d-8d49-12c770ccf8b0
    resourceVersion: "1207613"
    uid: c72655cb-ab67-4683-8cbd-e8101c65e484
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ubuntu-1
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.21.1
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7n8rv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ubuntu-1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-7n8rv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-01T09:26:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-01T09:26:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://96b6219e2c4a79feee8b5fbdbbccdc435f603821c052403b3e420e2cc5623240
      image: aiotceo/kube-proxy:v1.21.1
      imageID: docker-pullable://aiotceo/kube-proxy@sha256:3aeeb5b760b096b0a8ae71fa4bc28dfbfe77b11a06bf40360b5caf17d5b4c5b8
      lastState:
        terminated:
          containerID: docker://54c7d40e6911e79d23b804cd8542521bb2c244bb428b4ce5581f8a69d31cad8c
          exitCode: 2
          finishedAt: "2021-07-01T02:48:30Z"
          reason: Error
          startedAt: "2021-07-01T02:47:30Z"
      name: kube-proxy
      ready: true
      restartCount: 17
      started: true
      state:
        running:
          startedAt: "2021-07-01T02:50:00Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 192.168.227.2
    podIPs:
    - ip: 192.168.227.2
    qosClass: BestEffort
    startTime: "2021-06-01T09:26:52Z"
- metadata:
    annotations:
      kubernetes.io/config.hash: 05420f57eda78c83e738ac51b923344e
      kubernetes.io/config.mirror: 05420f57eda78c83e738ac51b923344e
      kubernetes.io/config.seen: "2021-06-01T09:26:37.499837093Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-06-01T09:26:41Z"
    labels:
      component: kube-scheduler
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-scheduler"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/scheduler.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:02Z"
    name: kube-scheduler-ubuntu-1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: ubuntu-1
      uid: fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6
    resourceVersion: "1207602"
    uid: df1f7eb1-e8c8-4442-82a0-a655e1f87758
  spec:
    containers:
    - command:
      - kube-scheduler
      - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
      - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
      - --bind-address=127.0.0.1
      - --kubeconfig=/etc/kubernetes/scheduler.conf
      - --leader-elect=true
      - --port=0
      image: k8s.gcr.io/kube-scheduler:v1.21.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-scheduler
      resources:
        requests:
          cpu: 100m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/scheduler.conf
        name: kubeconfig
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ubuntu-1
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/scheduler.conf
        type: FileOrCreate
      name: kubeconfig
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-11T14:30:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T05:53:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T05:53:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-11T14:30:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://1d7942717b73b2eed7fa0cf782fd3624815164a164f3e9f00c622d001a41ec11
      image: aiotceo/kube-scheduler:v1.21.1
      imageID: docker-pullable://aiotceo/kube-scheduler@sha256:b959d178004ea7aa2b2f118710f55b0b4ad2b9e7710bb8427c7351ef67b943cb
      lastState:
        terminated:
          containerID: docker://8e739ef89f508adf0c83d62e153fd5c9294fd291057feecaf064e90d00a9a4b2
          exitCode: 255
          finishedAt: "2021-07-05T05:53:46Z"
          reason: Error
          startedAt: "2021-07-05T05:25:35Z"
      name: kube-scheduler
      ready: true
      restartCount: 43
      started: true
      state:
        running:
          startedAt: "2021-07-05T05:53:46Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 192.168.227.2
    podIPs:
    - ip: 192.168.227.2
    qosClass: Burstable
    startTime: "2021-06-11T14:30:37Z"
- metadata:
    creationTimestamp: "2021-06-20T12:46:55Z"
    generateName: tsi-vault-54579454f8-
    labels:
      app: tsi-vault
      pod-template-hash: 54579454f8
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9494ea13-2a1b-4733-9d3d-a55f5fa097ad"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"tsi-vault"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"HOME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SKIP_CHOWN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SKIP_SETCAP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-01T07:41:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.1.22"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T05:26:35Z"
    name: tsi-vault-54579454f8-x7n7r
    namespace: tsi-vault
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tsi-vault-54579454f8
      uid: 9494ea13-2a1b-4733-9d3d-a55f5fa097ad
    resourceVersion: "1188253"
    uid: b2d33ecc-c605-437f-aa45-8d8f312cab62
  spec:
    containers:
    - env:
      - name: SKIP_SETCAP
        value: "true"
      - name: SKIP_CHOWN
        value: "true"
      - name: HOME
        value: /tmp
      image: tsidentity/ti-vault:v1.8.4
      imagePullPolicy: Always
      name: tsi-vault
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7sg5t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-7sg5t
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:47:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:53:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:53:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:47:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://dc392be91d106a828e86907f777e8a03d9b23027edf4fa3f0cc7a4eff4c06c9e
      image: tsidentity/ti-vault:v1.8.4
      imageID: docker-pullable://tsidentity/ti-vault@sha256:a75bc85ddd1280f9d0f7fc73cf279cfcbab87e1039a16cbadc40037bcf4e91c1
      lastState:
        terminated:
          containerID: docker://4b7cbdbe5f9c8aae23f0ebeaa5e1f08fce015a17e64df4e830751e296f868e0e
          exitCode: 0
          finishedAt: "2021-06-20T12:52:55Z"
          reason: Completed
          startedAt: "2021-06-20T12:47:29Z"
      name: tsi-vault
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-06-20T12:53:14Z"
    hostIP: 192.168.227.3
    phase: Running
    podIP: 10.244.1.22
    podIPs:
    - ip: 10.244.1.22
    qosClass: BestEffort
    startTime: "2021-06-20T12:47:08Z"
- metadata:
    annotations:
      checksum/config: d0fe713c7f09138881a3f1afb8fd33f96f56a00076d73913405c7969097d02fb
    creationTimestamp: "2021-06-30T07:20:33Z"
    generateName: pv-provisioner-
    labels:
      app.kubernetes.io/instance: pv
      app.kubernetes.io/name: provisioner
      controller-revision-hash: 5c764b7db6
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/config: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"539c494c-d762-47b9-8754-5c90f4743e80"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"provisioner"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"JOB_CONTAINER_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MY_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"MY_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/dev"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/provisioner/config"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/mnt/fast-disks"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"fast-disks"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"provisioner-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"provisioner-dev"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:24:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.0.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:03Z"
    name: pv-provisioner-szwxx
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: pv-provisioner
      uid: 539c494c-d762-47b9-8754-5c90f4743e80
    resourceVersion: "1207607"
    uid: 4dece510-a273-4b4c-b534-9bca2f42a3c4
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ubuntu-1
    containers:
    - env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: JOB_CONTAINER_IMAGE
        value: hangyan/local-volume-provisioner:v2.4.0
      image: hangyan/local-volume-provisioner:v2.4.0
      imagePullPolicy: IfNotPresent
      name: provisioner
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/provisioner/config
        name: provisioner-config
        readOnly: true
      - mountPath: /dev
        name: provisioner-dev
      - mountPath: /mnt/fast-disks
        mountPropagation: HostToContainer
        name: fast-disks
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-n4lc5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: pv-provisioner
    serviceAccountName: pv-provisioner
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: pv-provisioner-config
      name: provisioner-config
    - hostPath:
        path: /dev
        type: ""
      name: provisioner-dev
    - hostPath:
        path: /mnt/fast-disks
        type: ""
      name: fast-disks
    - name: kube-api-access-n4lc5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-30T07:20:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-30T07:20:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://cb221e280044d8c0f70e597fc8d6082715d4437a8d71986d754ad3de37e4adc5
      image: hangyan/local-volume-provisioner:v2.4.0
      imageID: docker-pullable://hangyan/local-volume-provisioner@sha256:27444b7b3c8dd5c9015674607db316fb5b8e45348fa1ccabe2c656a70f93ecf0
      lastState:
        terminated:
          containerID: docker://1836aadd3d1755c7ec5b793e158be48196842c90b025ac704093e0feefccfccf
          exitCode: 2
          finishedAt: "2021-07-01T02:48:30Z"
          reason: Error
          startedAt: "2021-07-01T02:47:39Z"
      name: provisioner
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2021-07-01T02:50:07Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 10.244.0.2
    podIPs:
    - ip: 10.244.0.2
    qosClass: BestEffort
    startTime: "2021-06-30T07:20:33Z"
- metadata:
    creationTimestamp: "2021-06-20T12:47:03Z"
    generateName: tiller-deploy-6498444d69-
    labels:
      app: helm
      name: tiller
      pod-template-hash: 6498444d69
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"9828e14d-dee7-47cb-ada6-146f33ffd613"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:automountServiceAccountToken: {}
          f:containers:
            k:{"name":"tiller"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"TILLER_HISTORY_MAX"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TILLER_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":44134,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":44135,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-01T07:41:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.1.24"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T05:26:35Z"
    name: tiller-deploy-6498444d69-4kth2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tiller-deploy-6498444d69
      uid: 9828e14d-dee7-47cb-ada6-146f33ffd613
    resourceVersion: "1188249"
    uid: 840c9c71-a993-4a92-86e7-f0cabbb160d3
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: TILLER_NAMESPACE
        value: kube-system
      - name: TILLER_HISTORY_MAX
        value: "0"
      image: jessestuart/tiller:v2.16.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /liveness
          port: 44135
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: tiller
      ports:
      - containerPort: 44134
        name: tiller
        protocol: TCP
      - containerPort: 44135
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readiness
          port: 44135
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-k2gbq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: tiller
    serviceAccountName: tiller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-k2gbq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:47:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:53:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:53:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:47:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b37aa100d1a41af5ba8b3c4c470ebfb3cc364534468ae2034e6043fc47122284
      image: jessestuart/tiller:v2.16.7
      imageID: docker-pullable://jessestuart/tiller@sha256:a3f310e1b6edbdaf5d0e1febe5e7779a43a269b9b9715724ae36626f4661ff56
      lastState:
        terminated:
          containerID: docker://bf9f8adf6bdce6defdc14ad103d9013792a294f858f2e0546817f13f6cb067a8
          exitCode: 2
          finishedAt: "2021-06-20T12:52:55Z"
          reason: Error
          startedAt: "2021-06-20T12:47:25Z"
      name: tiller
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2021-06-20T12:53:15Z"
    hostIP: 192.168.227.3
    phase: Running
    podIP: 10.244.1.24
    podIPs:
    - ip: 10.244.1.24
    qosClass: BestEffort
    startTime: "2021-06-20T12:47:08Z"
- metadata:
    creationTimestamp: "2021-07-05T06:33:18Z"
    labels:
      run: n2
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:run: {}
        f:spec:
          f:containers:
            k:{"name":"n2"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl-run
      operation: Update
      time: "2021-07-05T06:33:18Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.1.66"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T06:49:16Z"
    name: n2
    namespace: default
    resourceVersion: "1194806"
    uid: bb5f74ac-8663-4b94-a3c0-ae61e839fdd6
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: n2
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mqwtn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-mqwtn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T06:33:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T06:49:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T06:49:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T06:33:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4b9b1394e0d9424a2622f1e949200ed40529a9d0276e8043b8d37d0d8f767285
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:47ae43cdfc7064d28800bc42e79a429540c7c80168e8c8952778c0d5af1c09db
      lastState: {}
      name: n2
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T06:49:16Z"
    hostIP: 192.168.227.3
    phase: Running
    podIP: 10.244.1.66
    podIPs:
    - ip: 10.244.1.66
    qosClass: BestEffort
    startTime: "2021-07-05T06:33:18Z"
- metadata:
    creationTimestamp: "2021-07-05T09:10:48Z"
    generateName: antrea-octant-77df764cb7-
    labels:
      app: antrea
      component: antrea-octant
      pod-template-hash: 77df764cb7
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"29b5ecdb-5b91-4cd6-bec3-d0f93e686ae1"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"antrea-octant"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"KUBECONFIG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OCTANT_ACCEPTED_HOSTS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OCTANT_DISABLE_OPEN_BROWSER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OCTANT_LISTENER_ADDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":80,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/kube/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:10:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.1.68"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:10:50Z"
    name: antrea-octant-77df764cb7-vmglg
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: antrea-octant-77df764cb7
      uid: 29b5ecdb-5b91-4cd6-bec3-d0f93e686ae1
    resourceVersion: "1206545"
    uid: 51a259f2-4a91-4982-bd70-10295654ee8c
  spec:
    containers:
    - args:
      - -v
      command:
      - octant
      env:
      - name: OCTANT_ACCEPTED_HOSTS
        value: 0.0.0.0
      - name: OCTANT_LISTENER_ADDR
        value: 0.0.0.0:80
      - name: OCTANT_DISABLE_OPEN_BROWSER
        value: "true"
      - name: KUBECONFIG
        value: /kube/admin.conf
      image: projects.registry.vmware.com/antrea/octant-antrea-ubuntu:latest
      imagePullPolicy: IfNotPresent
      name: antrea-octant
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kube/
        name: kubeconfig
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-knw7k
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-2
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kubeconfig
      secret:
        defaultMode: 256
        secretName: octant-kubeconfig
    - name: kube-api-access-knw7k
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T09:10:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T09:10:50Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T09:10:50Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T09:10:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://838fdd85d14cf83bc7413300bfcabab8aefb6af04792f9106b739be2a9db97c8
      image: projects.registry.vmware.com/antrea/octant-antrea-ubuntu:latest
      imageID: docker-pullable://projects.registry.vmware.com/antrea/octant-antrea-ubuntu@sha256:193c434bf0dac51f065c62bdda54c8c73dc1c816ce2c17bcc3a8f8b618fc9ff9
      lastState: {}
      name: antrea-octant
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T09:10:49Z"
    hostIP: 192.168.227.3
    phase: Running
    podIP: 10.244.1.68
    podIPs:
    - ip: 10.244.1.68
    qosClass: BestEffort
    startTime: "2021-07-05T09:10:48Z"
- metadata:
    annotations:
      kubectl.kubernetes.io/default-container: antrea-agent
    creationTimestamp: "2021-07-05T08:51:50Z"
    generateName: antrea-agent-
    labels:
      app: antrea
      component: antrea-agent
      controller-revision-hash: 684ccfb868
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/default-container: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ea0a0276-5882-4c73-8b13-ab91f328e7f4"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"antrea-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":10350,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/antrea/antrea-agent.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/host/proc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/var/run/netns"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/cni"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
                k:{"mountPath":"/var/log/antrea"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/antrea"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
            k:{"name":"antrea-ovs"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/log/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
                k:{"mountPath":"/var/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/antrea/antrea-cni.conflist"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/antrea"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"antrea-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"host-cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-conf"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-proc"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-log-antrea"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-run-antrea"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-run-netns"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T08:51:50Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T08:52:00Z"
    name: antrea-agent-g5cn9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: antrea-agent
      uid: ea0a0276-5882-4c73-8b13-ab91f328e7f4
    resourceVersion: "1204938"
    uid: 88842910-27ac-4ef2-b9cb-13733dcb72b5
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ubuntu-2
    containers:
    - args:
      - --config
      - /etc/antrea/antrea-agent.conf
      - --logtostderr=false
      - --log_dir=/var/log/antrea
      - --alsologtostderr
      - --log_file_max_size=100
      - --log_file_max_num=4
      - --v=4
      command:
      - antrea-agent
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - container_liveness_probe agent
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: antrea-agent
      ports:
      - containerPort: 10350
        hostPort: 10350
        name: api
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /readyz
          port: api
          scheme: HTTPS
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 200m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/antrea/antrea-agent.conf
        name: antrea-config
        readOnly: true
        subPath: antrea-agent.conf
      - mountPath: /var/run/antrea
        name: host-var-run-antrea
      - mountPath: /var/run/openvswitch
        name: host-var-run-antrea
        subPath: openvswitch
      - mountPath: /var/lib/cni
        name: host-var-run-antrea
        subPath: cni
      - mountPath: /var/log/antrea
        name: host-var-log-antrea
      - mountPath: /host/proc
        name: host-proc
        readOnly: true
      - mountPath: /host/var/run/netns
        mountPropagation: HostToContainer
        name: host-var-run-netns
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vz2j8
        readOnly: true
    - args:
      - --log_file_max_size=100
      - --log_file_max_num=4
      command:
      - start_ovs
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - timeout 10 container_liveness_probe ovs
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: antrea-ovs
      resources:
        requests:
          cpu: 200m
      securityContext:
        capabilities:
          add:
          - SYS_NICE
          - NET_ADMIN
          - SYS_ADMIN
          - IPC_LOCK
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/openvswitch
        name: host-var-run-antrea
        subPath: openvswitch
      - mountPath: /var/log/openvswitch
        name: host-var-log-antrea
        subPath: openvswitch
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vz2j8
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - install_cni
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources:
        requests:
          cpu: 100m
      securityContext:
        capabilities:
          add:
          - SYS_MODULE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/antrea/antrea-cni.conflist
        name: antrea-config
        readOnly: true
        subPath: antrea-cni.conflist
      - mountPath: /host/etc/cni/net.d
        name: host-cni-conf
      - mountPath: /host/opt/cni/bin
        name: host-cni-bin
      - mountPath: /lib/modules
        name: host-lib-modules
        readOnly: true
      - mountPath: /var/run/antrea
        name: host-var-run-antrea
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vz2j8
        readOnly: true
    nodeName: ubuntu-2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: antrea-agent
    serviceAccountName: antrea-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: antrea-config-cbfh568k9m
      name: antrea-config
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: host-cni-conf
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: host-cni-bin
    - hostPath:
        path: /proc
        type: ""
      name: host-proc
    - hostPath:
        path: /var/run/netns
        type: ""
      name: host-var-run-netns
    - hostPath:
        path: /var/run/antrea
        type: DirectoryOrCreate
      name: host-var-run-antrea
    - hostPath:
        path: /var/log/antrea
        type: DirectoryOrCreate
      name: host-var-log-antrea
    - hostPath:
        path: /lib/modules
        type: ""
      name: host-lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-vz2j8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:51:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:52:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:52:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:51:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://7a9dbb2987bee2892d64e45f593bb6e8397efa8971219020478a71b482e24f9b
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imageID: docker-pullable://projects.registry.vmware.com/antrea/antrea-ubuntu@sha256:5b8169f4df1afa2fb665a8e9aa81a16ffd567e0c6e7df7fc4a40ef86dea1e439
      lastState: {}
      name: antrea-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T08:51:52Z"
    - containerID: docker://cc77007ac219c311f046202e43e5910f99d199e241ee096614a379757b455a66
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imageID: docker-pullable://projects.registry.vmware.com/antrea/antrea-ubuntu@sha256:5b8169f4df1afa2fb665a8e9aa81a16ffd567e0c6e7df7fc4a40ef86dea1e439
      lastState: {}
      name: antrea-ovs
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T08:51:52Z"
    hostIP: 192.168.227.3
    initContainerStatuses:
    - containerID: docker://c36b48bb7510b7d20a84009bf35bf67cb3764b89ae56648d5cd5209ed7faefe1
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imageID: docker-pullable://projects.registry.vmware.com/antrea/antrea-ubuntu@sha256:5b8169f4df1afa2fb665a8e9aa81a16ffd567e0c6e7df7fc4a40ef86dea1e439
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://c36b48bb7510b7d20a84009bf35bf67cb3764b89ae56648d5cd5209ed7faefe1
          exitCode: 0
          finishedAt: "2021-07-05T08:51:51Z"
          reason: Completed
          startedAt: "2021-07-05T08:51:51Z"
    phase: Running
    podIP: 192.168.227.3
    podIPs:
    - ip: 192.168.227.3
    qosClass: Burstable
    startTime: "2021-07-05T08:51:50Z"
- metadata:
    creationTimestamp: "2021-06-01T09:26:52Z"
    generateName: coredns-558bd4d5db-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 558bd4d5db
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5a2c8cc8-0938-4643-b5af-546836e82ccb"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:24:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.0.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:04Z"
    name: coredns-558bd4d5db-rs5pp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-558bd4d5db
      uid: 5a2c8cc8-0938-4643-b5af-546836e82ccb
    resourceVersion: "1207615"
    uid: 022fd9ca-cc9c-42d6-96ee-d2349d8dd9ce
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns/coredns:v1.8.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9qcpb
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ubuntu-1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-9qcpb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-01T09:26:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-01T02:50:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-01T09:26:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://502120a8581e5ce406624c5d8897da0f3684f804b17e65e6f4639e224682dac0
      image: coredns/coredns:1.8.0
      imageID: docker-pullable://coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e
      lastState:
        terminated:
          containerID: docker://510ee2d37ff4233c3c0c533cb15721869b39a16425f3392e7f4b0bd1c1c9d5e5
          exitCode: 0
          finishedAt: "2021-07-01T02:48:36Z"
          reason: Completed
          startedAt: "2021-07-01T02:47:42Z"
      name: coredns
      ready: true
      restartCount: 14
      started: true
      state:
        running:
          startedAt: "2021-07-01T02:50:08Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 10.244.0.4
    podIPs:
    - ip: 10.244.0.4
    qosClass: Burstable
    startTime: "2021-06-01T09:26:52Z"
- metadata:
    annotations:
      kubernetes.io/config.hash: ed5ad5a58a71d8fa7fc22eb5dcf3f425
      kubernetes.io/config.mirror: ed5ad5a58a71d8fa7fc22eb5dcf3f425
      kubernetes.io/config.seen: "2021-06-01T09:26:37.499779839Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2021-06-01T09:26:41Z"
    labels:
      component: kube-controller-manager
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-controller-manager"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/controller-manager.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/libexec/kubernetes/kubelet-plugins/volume/exec"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/usr/local/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"ca-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-pki"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"flexvolume-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"k8s-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-local-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:02Z"
    name: kube-controller-manager-ubuntu-1
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: ubuntu-1
      uid: fe1adbdf-a0fe-4ac1-9a8d-b569ef0a75d6
    resourceVersion: "1207596"
    uid: c333237a-10f1-4798-bfa9-c43cf3ac5e6f
  spec:
    containers:
    - command:
      - kube-controller-manager
      - --allocate-node-cidrs=true
      - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --bind-address=127.0.0.1
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --cluster-cidr=10.244.0.0/16
      - --cluster-name=kubernetes
      - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
      - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
      - --controllers=*,bootstrapsigner,tokencleaner
      - --kubeconfig=/etc/kubernetes/controller-manager.conf
      - --leader-elect=true
      - --port=0
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --root-ca-file=/etc/kubernetes/pki/ca.crt
      - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
      - --service-cluster-ip-range=10.96.0.0/12
      - --use-service-account-credentials=true
      image: k8s.gcr.io/kube-controller-manager:v1.21.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 200m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /etc/pki
        name: etc-pki
        readOnly: true
      - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: flexvolume-dir
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /etc/kubernetes/controller-manager.conf
        name: kubeconfig
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ubuntu-1
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /etc/pki
        type: DirectoryOrCreate
      name: etc-pki
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        type: DirectoryOrCreate
      name: flexvolume-dir
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /etc/kubernetes/controller-manager.conf
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:57:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T05:25:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T05:25:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:57:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bef4abb513b7b1ab1c745c8fde3a856c3b0a5c2e8b41d40f1d4d55e49155e716
      image: aiotceo/kube-controller-manager:v1.21.1
      imageID: docker-pullable://aiotceo/kube-controller-manager@sha256:e0d7e62864b91b05f02e51ce0ecf8c986270eedb2d1512edff0d43b8660a442e
      lastState:
        terminated:
          containerID: docker://a1a8ddc4ae13314dcd364d1cd85bb6de47b405ea8ad322d6fd51a76a78766b34
          exitCode: 255
          finishedAt: "2021-07-05T05:25:34Z"
          reason: Error
          startedAt: "2021-07-01T02:49:48Z"
      name: kube-controller-manager
      ready: true
      restartCount: 44
      started: true
      state:
        running:
          startedAt: "2021-07-05T05:25:35Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 192.168.227.2
    podIPs:
    - ip: 192.168.227.2
    qosClass: Burstable
    startTime: "2021-06-20T12:57:18Z"
- metadata:
    creationTimestamp: "2021-06-02T08:41:09Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 6bc6858f58
      k8s-app: kube-proxy
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"f331e819-a578-459d-8d49-12c770ccf8b0"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-01T07:41:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T05:26:35Z"
    name: kube-proxy-t4vrq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: f331e819-a578-459d-8d49-12c770ccf8b0
    resourceVersion: "1188250"
    uid: 5cbe6bcd-55d7-484d-8496-6ce02a9b4f8d
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ubuntu-2
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.21.1
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5jwxr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ubuntu-2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-5jwxr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-06-02T16:18:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:53:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-06-20T12:53:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-06-02T08:41:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://7857cb4057b14f6b64cb101d8280b09a25e784f03f5fa57eb451a6938bc79e16
      image: aiotceo/kube-proxy:v1.21.1
      imageID: docker-pullable://aiotceo/kube-proxy@sha256:3aeeb5b760b096b0a8ae71fa4bc28dfbfe77b11a06bf40360b5caf17d5b4c5b8
      lastState:
        terminated:
          containerID: docker://e670330d962a9d3b175285fa7d7dc448a917b779645490ef7377d36015eaac05
          exitCode: 2
          finishedAt: "2021-06-20T12:52:55Z"
          reason: Error
          startedAt: "2021-06-20T12:42:31Z"
      name: kube-proxy
      ready: true
      restartCount: 5
      started: true
      state:
        running:
          startedAt: "2021-06-20T12:52:58Z"
    hostIP: 192.168.227.3
    phase: Running
    podIP: 192.168.227.3
    podIPs:
    - ip: 192.168.227.3
    qosClass: BestEffort
    startTime: "2021-06-02T16:18:16Z"
- metadata:
    creationTimestamp: "2021-07-05T08:19:36Z"
    generateName: antrea-controller-d467f5d64-
    labels:
      app: antrea
      component: antrea-controller
      pod-template-hash: d467f5d64
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"674808fb-2158-4ec7-a4b0-b73cc35cf287"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"antrea-controller"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"ANTREA_CONFIG_MAP_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"SERVICEACCOUNT_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":10349,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/antrea/antrea-controller.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/var/log/antrea"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/antrea/antrea-controller-tls"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"antrea-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"antrea-controller-tls"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"host-var-log-antrea"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T08:19:36Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.3"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T08:19:46Z"
    name: antrea-controller-d467f5d64-m82m4
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: antrea-controller-d467f5d64
      uid: 674808fb-2158-4ec7-a4b0-b73cc35cf287
    resourceVersion: "1201243"
    uid: 7febf797-4572-4d60-9d56-ecbdbac86f55
  spec:
    containers:
    - args:
      - --config
      - /etc/antrea/antrea-controller.conf
      - --logtostderr=false
      - --log_dir=/var/log/antrea
      - --alsologtostderr
      - --log_file_max_size=100
      - --log_file_max_num=4
      - --v=4
      command:
      - antrea-controller
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: SERVICEACCOUNT_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: ANTREA_CONFIG_MAP_NAME
        value: antrea-config-cbfh568k9m
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /livez
          port: api
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: antrea-controller
      ports:
      - containerPort: 10349
        hostPort: 10349
        name: api
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /readyz
          port: api
          scheme: HTTPS
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 200m
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/antrea/antrea-controller.conf
        name: antrea-config
        readOnly: true
        subPath: antrea-controller.conf
      - mountPath: /var/run/antrea/antrea-controller-tls
        name: antrea-controller-tls
      - mountPath: /var/log/antrea
        name: host-var-log-antrea
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6w86
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ubuntu-2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: antrea-controller
    serviceAccountName: antrea-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: antrea-config-cbfh568k9m
      name: antrea-config
    - name: antrea-controller-tls
      secret:
        defaultMode: 256
        optional: true
        secretName: antrea-controller-tls
    - hostPath:
        path: /var/log/antrea
        type: DirectoryOrCreate
      name: host-var-log-antrea
    - name: kube-api-access-r6w86
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:19:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:19:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:19:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:19:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://50c9d2f3aadd83a73444e1cc242f1e16ba37f976a4946fe766f169aad64a4bb9
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imageID: docker-pullable://projects.registry.vmware.com/antrea/antrea-ubuntu@sha256:5b8169f4df1afa2fb665a8e9aa81a16ffd567e0c6e7df7fc4a40ef86dea1e439
      lastState: {}
      name: antrea-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T08:19:38Z"
    hostIP: 192.168.227.3
    phase: Running
    podIP: 192.168.227.3
    podIPs:
    - ip: 192.168.227.3
    qosClass: Burstable
    startTime: "2021-07-05T08:19:36Z"
- metadata:
    creationTimestamp: "2021-07-05T09:07:19Z"
    labels:
      run: n4
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:run: {}
        f:spec:
          f:containers:
            k:{"name":"n4"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl-run
      operation: Update
      time: "2021-07-05T09:07:19Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.0.6"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:02Z"
    name: n4
    namespace: default
    resourceVersion: "1207605"
    uid: 9c3849ab-0637-431b-8fc9-0da24f289291
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: n4
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-t5v4g
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-t5v4g
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T09:07:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T09:07:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T09:07:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T09:07:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bf6118c675a039c787408ecbf8852b49484786c2f00ceafa2e63a816ad354077
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:47ae43cdfc7064d28800bc42e79a429540c7c80168e8c8952778c0d5af1c09db
      lastState: {}
      name: n4
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T09:07:24Z"
    hostIP: 192.168.227.2
    phase: Running
    podIP: 10.244.0.6
    podIPs:
    - ip: 10.244.0.6
    qosClass: BestEffort
    startTime: "2021-07-05T09:07:19Z"
- metadata:
    annotations:
      kubectl.kubernetes.io/default-container: antrea-agent
    creationTimestamp: "2021-07-05T08:51:49Z"
    generateName: antrea-agent-
    labels:
      app: antrea
      component: antrea-agent
      controller-revision-hash: 684ccfb868
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/default-container: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:component: {}
            f:controller-revision-hash: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ea0a0276-5882-4c73-8b13-ab91f328e7f4"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"antrea-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"POD_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":10350,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/antrea/antrea-agent.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/host/proc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/host/var/run/netns"}:
                  .: {}
                  f:mountPath: {}
                  f:mountPropagation: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/cni"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
                k:{"mountPath":"/var/log/antrea"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/antrea"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
            k:{"name":"antrea-ovs"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/var/log/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
                k:{"mountPath":"/var/run/openvswitch"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/antrea/antrea-cni.conflist"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                  f:subPath: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/run/antrea"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"antrea-config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"host-cni-bin"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-cni-conf"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-proc"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-log-antrea"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-run-antrea"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"host-var-run-netns"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-07-05T09:24:58Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.227.2"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T09:25:04Z"
    name: antrea-agent-77l74
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: antrea-agent
      uid: ea0a0276-5882-4c73-8b13-ab91f328e7f4
    resourceVersion: "1207610"
    uid: aa8beac3-2414-49e8-8e8f-59b6978a10a5
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ubuntu-1
    containers:
    - args:
      - --config
      - /etc/antrea/antrea-agent.conf
      - --logtostderr=false
      - --log_dir=/var/log/antrea
      - --alsologtostderr
      - --log_file_max_size=100
      - --log_file_max_num=4
      - --v=4
      command:
      - antrea-agent
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - container_liveness_probe agent
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: antrea-agent
      ports:
      - containerPort: 10350
        hostPort: 10350
        name: api
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /readyz
          port: api
          scheme: HTTPS
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 200m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/antrea/antrea-agent.conf
        name: antrea-config
        readOnly: true
        subPath: antrea-agent.conf
      - mountPath: /var/run/antrea
        name: host-var-run-antrea
      - mountPath: /var/run/openvswitch
        name: host-var-run-antrea
        subPath: openvswitch
      - mountPath: /var/lib/cni
        name: host-var-run-antrea
        subPath: cni
      - mountPath: /var/log/antrea
        name: host-var-log-antrea
      - mountPath: /host/proc
        name: host-proc
        readOnly: true
      - mountPath: /host/var/run/netns
        mountPropagation: HostToContainer
        name: host-var-run-netns
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2jlkv
        readOnly: true
    - args:
      - --log_file_max_size=100
      - --log_file_max_num=4
      command:
      - start_ovs
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/sh
          - -c
          - timeout 10 container_liveness_probe ovs
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: antrea-ovs
      resources:
        requests:
          cpu: 200m
      securityContext:
        capabilities:
          add:
          - SYS_NICE
          - NET_ADMIN
          - SYS_ADMIN
          - IPC_LOCK
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/openvswitch
        name: host-var-run-antrea
        subPath: openvswitch
      - mountPath: /var/log/openvswitch
        name: host-var-log-antrea
        subPath: openvswitch
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2jlkv
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - install_cni
      image: projects.registry.vmware.com/antrea/antrea-ubuntu:latest
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources:
        requests:
          cpu: 100m
      securityContext:
        capabilities:
          add:
          - SYS_MODULE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/antrea/antrea-cni.conflist
        name: antrea-config
        readOnly: true
        subPath: antrea-cni.conflist
      - mountPath: /host/etc/cni/net.d
        name: host-cni-conf
      - mountPath: /host/opt/cni/bin
        name: host-cni-bin
      - mountPath: /lib/modules
        name: host-lib-modules
        readOnly: true
      - mountPath: /var/run/antrea
        name: host-var-run-antrea
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2jlkv
        readOnly: true
    nodeName: ubuntu-1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: antrea-agent
    serviceAccountName: antrea-agent
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: antrea-config-cbfh568k9m
      name: antrea-config
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: host-cni-conf
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: host-cni-bin
    - hostPath:
        path: /proc
        type: ""
      name: host-proc
    - hostPath:
        path: /var/run/netns
        type: ""
      name: host-var-run-netns
    - hostPath:
        path: /var/run/antrea
        type: DirectoryOrCreate
      name: host-var-run-antrea
    - hostPath:
        path: /var/log/antrea
        type: DirectoryOrCreate
      name: host-var-log-antrea
    - hostPath:
        path: /lib/modules
        type: ""
      name: host-lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-2jlkv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:51:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:51:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:51:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T08:51:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4623e189da5e2f1e0278e54e3cab3b6148b125956f8c0de297a8b88ba896eee2
      image: antrea/antrea-ubuntu:latest
      imageID: docker-pullable://antrea/antrea-ubuntu@sha256:80a5f7251c0650bf011631a5b43b0063ee8ab5558ad80d0245144ebe7a46be54
      lastState: {}
      name: antrea-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T08:51:51Z"
    - containerID: docker://135cefa081fa9563343ab2185cd5dbb9d98ebfdf31942499db07995ee2b83b89
      image: antrea/antrea-ubuntu:latest
      imageID: docker-pullable://antrea/antrea-ubuntu@sha256:80a5f7251c0650bf011631a5b43b0063ee8ab5558ad80d0245144ebe7a46be54
      lastState: {}
      name: antrea-ovs
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T08:51:52Z"
    hostIP: 192.168.227.2
    initContainerStatuses:
    - containerID: docker://f8e0f359138729984538c0c6fe3931359a2a0f31e7dc714a33e766cf513d2d72
      image: antrea/antrea-ubuntu:latest
      imageID: docker-pullable://antrea/antrea-ubuntu@sha256:80a5f7251c0650bf011631a5b43b0063ee8ab5558ad80d0245144ebe7a46be54
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://f8e0f359138729984538c0c6fe3931359a2a0f31e7dc714a33e766cf513d2d72
          exitCode: 0
          finishedAt: "2021-07-05T08:51:50Z"
          reason: Completed
          startedAt: "2021-07-05T08:51:50Z"
    phase: Running
    podIP: 192.168.227.2
    podIPs:
    - ip: 192.168.227.2
    qosClass: Burstable
    startTime: "2021-07-05T08:51:49Z"
- metadata:
    creationTimestamp: "2021-07-05T06:33:15Z"
    labels:
      run: n1
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:run: {}
        f:spec:
          f:containers:
            k:{"name":"n1"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kubectl-run
      operation: Update
      time: "2021-07-05T06:33:15Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.1.65"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-07-05T06:49:24Z"
    name: n1
    namespace: default
    resourceVersion: "1194821"
    uid: c5db1ef7-7417-464d-9f5c-3e281cf667ad
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: n1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-85jxt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ubuntu-2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-85jxt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T06:33:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T06:49:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T06:49:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-07-05T06:33:15Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://103f6f730056c573de291692b26aecdec75b5c3ae9548cc2c892be3da100bad6
      image: nginx:latest
      imageID: docker-pullable://nginx@sha256:47ae43cdfc7064d28800bc42e79a429540c7c80168e8c8952778c0d5af1c09db
      lastState: {}
      name: n1
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-07-05T06:49:24Z"
    hostIP: 192.168.227.3
    phase: Running
    podIP: 10.244.1.65
    podIPs:
    - ip: 10.244.1.65
    qosClass: BestEffort
    startTime: "2021-07-05T06:33:15Z"
metadata:
  resourceVersion: "1245620"
---
